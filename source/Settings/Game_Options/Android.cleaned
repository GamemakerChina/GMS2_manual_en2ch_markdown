<html>
 <head>
 </head>
 <body>
  <h1>
   Android Game Options
  </h1>
  This section outlines the different options available to you that control how your Android game projects will be compiled. The different sections are:
  <h2>
   General
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_General1_Options.png"/><br/>
  The first part of the
  <strong>
   General
  </strong>
  section is dedicated to the
  <strong>
   Product Information
  </strong>
  and the
  <strong>
   Build Settings
  </strong>
  . You should fill in the Product information, which includes the projects
  <strong>
   Display Name
  </strong>
  , its Package information, which consists of a
  <strong>
   Domain
  </strong>
  ,
  <strong>
   Company
  </strong>
  and
  <strong>
   Product
  </strong>
  . The package information can only be made up of letters from A-Z and numbers 0-9, with no symbols or other special characters at all, nor should it have uppercase characters. These details will then be used to generate a Package ID with the format "
  <span>
   com.company.myappname
  </span>
  ".
  
  
   You then need to set the
  <strong>
   Build Tools
  </strong>
  as well as the
  <strong>
   Target
  </strong>
  ,
  <strong>
   Minimum
  </strong>
  and
  <strong>
   Compile SDK
  </strong>
  versions.
  <strong>
   NOTE
  </strong>
  : There is also an option for the "
  <strong>
   Support Library
  </strong>
  " version to use. From
  <span>
   GameMaker
  </span>
  v2.2.4 and above, this is no longer required and any values used here will be ignored. The setting is maintained for use with legacy projects that require an earlier runtime than 2.2.4.
  
  
   The Build Tools (and Support Library if required) are used when
  <span>
   GameMaker
  </span>
  builds your game for the Android target and should be set to appropriate values based on the tools you have installed using Android Studio.
  <ul>
   <li>
    The
    <strong>
     Target SDK
    </strong>
    indicates that you have tested your app on (up to and including) the version you specify here. This is simply to give the Android OS an idea of how it should handle your app in terms of OS features. For all practical purposes, most apps are going to want to set Target SDK to the latest released version of the API (as used by the Compile SDK setting). This will ensure your app looks as good as possible on the most recent Android devices. Note that from November 2019 Google has made API level 28 the required target.
   </li>
   <li>
    The
    <strong>
     Minimum SDK
    </strong>
    version is the minimum API level that will run your project. From November 2019 Google has made API level 16 the absolute minimum required, but if you add extensions then they may require a higher minimum API level.
   </li>
   <li>
    The
    <strong>
     Compile SDK
    </strong>
    version is the version of the API that the project is compiled against. This means you can use Android API features included in that version of the API. If you try and use API 16 features - for example - but set Compile SDK 15, then you will get a compilation error. However, if you set the Compile SDK to 28 then you can still run the app on an API 26 device (as well as all other previous versions too).
   </li>
  </ul>
  You can select from one of the predefined target settings by clicking on the
  <strong>
   Pre-populate SDK
  </strong>
  values to chosen API level button, which will open a list of different APIs to choose from. Selecting any one of them will populate all the SDK files with appropriate values which you can then use or edit as required.
  <strong>
   NOTE
  </strong>
  : You must have installed the appropriate APIs in the Android SDK Manager or through Android Studio for your projects to compile correctly.
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_General2_Options.png"/><br/>
  The second part of the
  <strong>
   General
  </strong>
  section covers the CPU Architectures to build for, with the following options available (you can select all of them or only those that you require, but note that each one will add to the final size of the compiled apk):
  <ul>
   <li>
    Build for ARMV5 (checked by default)
   </li>
   <li>
    Build for ARMV7 (Checked by default)
   </li>
   <li>
    Build for x86 (checked by default)
   </li>
   <li>
    Build for Mips (checked by default)
   </li>
   <li>
    Build for ARM64
   </li>
   <li>
    Build for x86_64
   </li>
  </ul>
  After setting that up you can select the different Orientations that your game can be run on for the best user experience. The available options are:
  <ul>
   <li>
    Portrait
   </li>
   <li>
    Portrait-flipped
   </li>
   <li>
    Landscape
   </li>
   <li>
    Landscape-flipped
   </li>
  </ul>
  Finally you have the following miscellaneous options:
  <ul>
   <li>
    <strong>
     Enable Bluetooth/iCade support
    </strong>
    : This will add support for bluetooth or iCade gamepads to your game project. This is on by default.
   </li>
   <li>
    <strong>
     Run Lint Code Analysis
    </strong>
    : When this option is flagged, the build tools will run a lint code analysis on the project as it builds, giving a more in-depth error check and showing more information in the output window as the project compiles (a LOG file will be created too, with the path to the file shown at the end of compiling in the
    <a href="../../Introduction/The_Output_Window.htm">
     Output Window
    </a>
    ). Note that not everything flagged by lint analysis as an error is necessarily problematic for your game, and having this enabled may mean that your game no longer compiles, even though when it is off, it will compile and run fine. Essentially this is only for debugging, and the option is off by default.
   </li>
   <li>
    <strong>
     Install Location
    </strong>
    : Here you can set the default Install Location for your game. This can either be set to
    <strong>
     Automatic
    </strong>
    , in which case the game will be installed to the location chosen by the user on their device, or it can be set to
    <strong>
     Prefer External
    </strong>
    which will always try to install the game to the external storage of the device.
   </li>
  </ul>
  You can also set the Android
  <strong>
   Sleep Margin
  </strong>
  here. This option is related to reducing stuttering when running your game on specific systems. Basically, if your game is running faster than your room speed
  <span>
   GameMaker
  </span>
  will "sleep" for the remaining time, but this sleep can be quite inaccurate and you can often end of sleeping for longer than necessary, causing your frame to take longer which causes stuttering. To get around this we can sleep for less time, then sit in a tight loop for the remainder of the time to make it more accurate - although the problem with sitting in a loop is that it causes CPU usage to increase, which in turn can cause your CPU temperatures to rise and your device to use more battery. By default, this value is set to 4, and in 99.99% of the cases you'll be fine with this, but for low end devices or for devices with a lot of background processes running this may not be an ideal solution and a value of 5 up to 10 may be required. Note though that this is very much a device specific configuration and what works on your build device may not be appropriate for another user, and as such if in doubt leave it set to 4.
  <h2>
   Adaptive Icons
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_AdaptiveIcons_Options.png"/><br/>
  Android 8.0 (API level 26) introduced
  <strong>
   adaptive launcher icons
  </strong>
  for your games, and these icons can display a variety of shapes across different device models. To deal with this, you are required to supply a number of foreground and background images for your icons to be displayed at different sizes. These icon sizes are:
  <ul>
   <li>
    81x81 pixels (LDPI)
   </li>
   <li>
    108x108 pixels MDPI)
   </li>
   <li>
    162x162 pixels (HDPI)
   </li>
   <li>
    216x216 pixels (XHDPI)
   </li>
   <li>
    324x324 pixels (XXHDPI)
   </li>
   <li>
    432x432 pixels (XXXHDPI)
   </li>
  </ul>
  You can supply each forground and background image individually, or you can choose to Generate Icons From File. This means that
  <span>
   GameMaker
  </span>
  will generate the required icon images from a base (XXXHDPI) file. You need to supply one image each for the foreground and background and then click the button labeled Generate, and the Icons will be created for you. Images should all be in
  <span>
   *.png
  </span>
  format.
  
  
   It's important to understand that your adaptive icons may be masked on any given device and so you also have the option to see how they'll look along with these masks from the
  <strong>
   Preview Adaptive Icons
  </strong>
  menu:
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_AdaptiveIcons_Masks.gif"/><br/>
  Note that this is simply a preview of how the icon
  <em>
   could
  </em>
  look with the selected mask, and the setting will not affect how the icons are exported and displayed, as that is up to the device and OS the game will be run on. Also note that these icons are
  <strong>
   not
  </strong>
  created for you as part of the image generation done when using the
  <a href="../../IDE_Tools/Project_Image_Generator.htm">
   Project Image Generator
  </a>
  tool.
  <h2>
   Graphics
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_Graphics_Options.png"/><br/>
  Here you can change the following details related to how your game will be displayed, with the following options are available:
  <ul>
   <li>
    <strong>
     Interpolate colours between pixels
    </strong>
    : Turns on
    <a>
     linear interpolation
    </a>
    , which basically "smooths" pixels. For crisp pixel graphics, it should be off, but if you have nice alpha blends and smoothed edged graphics it is better left on. This is on by default.
   </li>
   <li>
    <strong>
     Screen Colour Depth
    </strong>
    : This can be used to set the colour depth for rendering to either 16bit or 24bit. This will affect the compatibility with some older devices if it is set to 24bit, and will also increase the
    <em>
     ashmem
    </em>
    that is needed (this is the shared memory on AmazonFire devices).
   </li>
   <li>
    <strong>
     Device Support
    </strong>
    : This option will set whether to support only devices that have a dedicated GPU, or all devices. Basically, if your game has any advanced drawing functions like alpha blending, additive blending, surfaces, etc... you should limit it to those devices that have a GPU otherwise you run the risk of getting negative comments and poor rating for your game due to graphical errors or crashes on older devices.
   </li>
   <li>
    <strong>
     Scaling
    </strong>
    : Here you can select to scale the draw canvas maintaining the aspect ratio within the device screen - adding "padding" around the edges to fit the screen - or you can select to have the draw canvas stretched to fit the device screen.
   </li>
  </ul>
  Finally there is the option to set the size of the
  <a>
   texture page
  </a>
  . The default (and most compatible) size is 2048x2048, but you can choose from anywhere between 256x256 up to 8192x8192. There is also a button marked
  <strong>
   Preview
  </strong>
  which will generate the texture pages for this platform and then open a window so that you can see how they look. This can be very useful if you wish to see how the texture pages are structured and to prevent having texture pages larger (or smaller) than necessary. For more information on texture pages, please see
  <a href="../Texture_Information/Texture_Pages.htm">
   here
  </a>
  .
  <strong>
   NOTE
  </strong>
  : Be aware that the larger the size of the texture page, the less compatible your game will be with different browsers and devices.
  <h2>
   Icons
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_Icons_Options.png"/><br/>
  This section permits you to add the various
  <strong>
   Icon
  </strong>
  images that your project will need for the different store pages and devices. All icon images should be created as 24bit
  <span>
   *.png
  </span>
  files of the appropriate sizes given.
  
  
   It is worth noting that
  <span>
   GameMaker
  </span>
  has a
  <a href="../../IDE_Tools/Project_Image_Generator.htm">
   Project Image Generator
  </a>
  tool which can be used to automatically create all the images required for all the different target platforms your game is being compiled to. If you use this tool, you should revise the images created to ensure that they are what you require. The tool will generate Icons as well as Images (see the section below).
  <h2>
   Images
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_Images_Options.png"/><br/>
  Here you can set the
  <strong>
   Border Colour
  </strong>
  that will be used as the background for splash screens that are not set to fill the full screen. You can also add
  <strong>
   Splash Screens
  </strong>
  to your final game file, for both
  <em>
   landscape
  </em>
  and
  <em>
   portrait
  </em>
  modes, which will be shown while the game loads on the device. This screen should be a 24bit
  <span>
   *.png
  </span>
  file, and is recommended to be the same size as the first room (or view) of your game. If you require that the splash screen be shown for a specific time then you can also set it here from 0 to 10 seconds (the default time of 0 means that it will only show for the duration of the asset loading). You can also set how the splash screen should be displayed from the following options:
  <ul>
   <li>
    <strong>
     Keep Aspect Ratio
    </strong>
    : This will maintain the aspect ratio of the image compared to the device screen, adding "padding" around the edges where required.
   </li>
   <li>
    <strong>
     Crop To Fit
    </strong>
    : This will keep the image 1:1 with the device screen and crop (or pad) the edges as required.
   </li>
   <li>
    <strong>
     Stretch
    </strong>
    : This will stretch the image to fill the device screen (and may distort the image shown).
   </li>
  </ul>
  Finally you can set the
  <strong>
   Banner Image
  </strong>
  for the game on Android TV devices, which is also a 24bit
  <span>
   *.png
  </span>
  .
  <h2>
   Packaging
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_Packaging_Options.png"/><br/>
  One of the features of using Google Play for your Android games is the ability to
  <strong>
   licence
  </strong>
  your games. This means that your games will be controlled by Google so that only people that have downloaded it through their market will be able to play the game, thus avoiding illegal copies of your product from getting distributed.
  
  
   To activate this function in your game, you need to copy your
  <strong>
   Public Key
  </strong>
  into the box labelled
  <strong>
   Google Licencing Public Key
  </strong>
  . This licence can be found by going to your
  <a href="https://play.google.com/apps/publish">
   Google Play Developers Page
  </a>
  and then selecting the game you wish to edit. Once on the game profile page, scroll down to the section titled "
  <em>
   Services &amp; APIs
  </em>
  " and there you should find the Public key that is needed for this functionality to be enabled.
  
  
   Once activated, if anyone who is not authorised to posses your game tries to play it, they will be shown a pop-up message box that will inform them that the licence cannot be found on their device, and then give them the option to retry and test again, or exit the game.
  
  
   Another feature of Licensing is that your game can use
  <strong>
   APK Expansions
  </strong>
  . This is a way to bypass the 50MB maximum application size imposed by Google Play (and only Google Play). It will create your game in two parts: a small
  <span>
   *.apk
  </span>
  file and a larger
  <span>
   *.zip
  </span>
  file which will hold all your games assets, both of which are uploaded to the store. When the user first runs your game, the zip will be downloaded and unpacked. You can find further details of this option
  <a href="https://help.yoyogames.com/hc/en-us/articles/115002418632-Android-Using-APK-Expansions-With-Google-Play">
   here
  </a>
  .
  
  
   You can also use Google Dynamic Asset Delivery to create app bundles as large as 1GB when using the
  <span>
   *.aab
  </span>
  export option. This packages all game assets as "install-time" assets which are installed alongside the app itself. You can find further details on this feature
  <a href="https://developer.android.com/guide/playcore/asset-delivery">
   here
  </a>
  .
  
  
   Finally, you have the option to prepare the final app package as an
  <strong>
   Android TV
  </strong>
  game (you should only tick this if your game conforms to the
  <a href="https://developer.android.com/training/tv/games/">
   Android TV guidelines
  </a>
  ).
  <h2>
   Permissions
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_Permissions_Options.png"/><br/>
  From this tab you can change some of the permissions that your game may request within the Android Manifest.
  <span>
   GameMaker
  </span>
  will allocate permissions automatically as required based on the functions the game uses, however you may find you require a permission for your game that hasn't been correctly assigned (for example, when you use custom extensions) in which case tick the requisite permission box.
  
  
   The list below outlines those permissions that are available:
  <ul>
   <li>
    <span>
     WRITE_EXTERNAL_STORAGE
    </span>
    : Will permit your game to write to external storage.
   </li>
   <li>
    <span>
     READ_PHONE_STATE
    </span>
    : Allow read only access to the phone state.
   </li>
   <li>
    <span>
     ACCESS_NETWORK_STATE
    </span>
    : Permit your game to access information about networks.
   </li>
   <li>
    <span>
     INTERNET
    </span>
    : Permit your game to open network sockets.
   </li>
   <li>
    <span>
     BLUETOOTH
    </span>
    : Will permit your game to connect to paired Bluetooth devices.
   </li>
   <li>
    <span>
     RECORD_AUDIO
    </span>
    : Will permit your game to record audio input from the microphone.
   </li>
  </ul>
  <strong>
   NOTE
  </strong>
  : If you are not sure that you need these, you should probably just leave them un-checked by default and let
  <span>
   GameMaker
  </span>
  deal with the permissions for your game.
  
  
   The Android Permissions secton also has an area where you can inject permissions into the
  <strong>
   Android Application Tags
  </strong>
  in the
  <span>
   Androidmanifest.xml
  </span>
  . You can find a full list of available tags from the Android documentation here:
  <ul>
   <li>
    <a href="https://developer.android.com/guide/topics/manifest/application-element">
     Android Developer: Application Tags
    </a>
   </li>
  </ul>
  It is worth noting that for target API 28 and above, you will no longer be permitted to use any external web calls using "
  <span>
   http
  </span>
  " - "
  <span>
   https
  </span>
  " is required instead - unless you add the following tag:
  <pre><code class="language-gml">android:usesCleartextTraffic="true"
</code></pre>
  <h2>
   Social
  </h2>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Settings/Android_Social_Options.png"/><br/>
  This section is for enabling different
  <strong>
   Social
  </strong>
  features in your Android game. The following options can be chosen:
  <ul>
   <li>
    <strong>
     Google
    </strong>
    -
    <strong>
     Enable Cloud Saving
    </strong>
    : Checking this will enable Google Cloud Saving, and will prompt you to download and install the relevant extension from the
    <a href="../../Introduction/The_Marketplace.htm">
     Marketplace
    </a>
    . See the section on Cloud Saving from the
    <a href="../../GameMaker_Language/GML_Reference/Asynchronous_Functions/Asynchronous_Functions.htm">
     Asynchronous Functions
    </a>
    page.
   </li>
   <li>
    <strong>
     Google - Google Services ID
    </strong>
    : This allows you to enter the Google Services ID of your app.
   </li>
  </ul>
 </body>
</html>