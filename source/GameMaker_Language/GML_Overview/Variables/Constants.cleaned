<html>
 <head>
 </head>
 <body>
  <h1>
   Constants
  </h1>
  A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values
  <em>
   cannot be changed after they have been declared
  </em>
  . This makes them ideal for holding values that are used throughout the game to identify special data.
  
  
   In the GameMaker Language there are two types of user-defined constant:
  <strong>
   macros
  </strong>
  and
  <strong>
   enums
  </strong>
  , both of which are explained below. Also note that any value that is always the same is classed as a constant, regardless of the
  <a href="../Data_Types.htm">
   data type
  </a>
  , for example, a string or the number 3.
  <span>
   NOTE
  </span>
  The GameMaker Language also has a number of built-in constant values that are used to identify specific things. These are outlined on the appropriate pages for the runtime functions that require them in the
  <a href="../../GML_Reference/GML_Reference.htm">
   GML Reference
  </a>
  section.
  <h2>
   Macros
  </h2>
  While not exactly variables, macros are similar to them in how they are used, i.e.: they are named values that you can use throughout your code to replace
  <a>
   hard-coded
  </a>
  values. Basically, a macro is a named variable that holds an expression. You can define your own macros using the
  <a href="../Script_Functions.htm">
   Script Editor
  </a>
  and then use them in your code and actions as if they were regular variables, with the one difference being that they
  <i>
   can't be changed in the game
  </i>
  .
  
  
   The syntax structure for a macro is as follows:
  <pre><code class="language-gml">#macro
<i>
 &amp;amp;lt;variable&amp;amp;gt;
</i>
<i>
 &amp;amp;lt;expression&amp;amp;gt;
</i></code></pre>
  For example, say you define the following macro "
  <span>
   total_weapons
  </span>
  ":
  <pre><code class="language-gml">#macro total_weapons 10
</code></pre>
  Macro syntax...
  
  
   The syntax shown above must be used correctly to define macros. You cannot use an equal sign (like in variables) or put a semicolon at the end (like in a regular statement). Doing so will cause your macro definition to become invalid.
    
    For example, this is not the correct way to define a macro:
  <span>
   #macro total_weapons = 10;
  </span>
  Removing the equal sign and colon will make it a valid macro definition.
  
  
   You could then use this in your code like this:
  <pre><code class="language-gml">pos++;

if (pos &amp;amp;gt;= total_weapons)
{
    pos = 0;
}
</code></pre>
  Note that you would not be able to change the constant's value, so code like this will cause the game to crash:
  <pre><code class="language-gml">total_weapons = 11;
</code></pre>
  You can define a macro anywhere in your code or in a script and it will be
  <i>
   pre-compiled
  </i>
  and included in your game as if it was there from the start, but we recommend that you create a dedicated script asset and define all your macros in there. It will be easier to organise and debug later!
  
  
   If you need the value of a macro to change at run-time then you should probably make it a
  <a href="Global_Variables.htm">
   global variable
  </a>
  , since these can be changed from code during a game, unless you set the macro to be a
  <span>
   <a href="../Runtime_Functions.htm">
    runtime
   </a>
  </span>
  <a href="../Runtime_Functions.htm">
   function
  </a>
  . By setting the macro to a function it means that this function will be called every time you use the macro. For example:
  <pre><code class="language-gml">#macro col make_colour_hsv(irandom(255), 255, 255)
</code></pre>
  You would then call this macro something like this:
  <pre><code class="language-gml">image_blend = col;
</code></pre>
  Using this code will make the image blend a different colour every time the macro is used. It is worth noting that you can also split macros over multiple lines using the
  <span>
   <span>
    \
   </span>
  </span>
  character to show where the line breaks. An example would be something like:
  <pre><code class="language-gml">#macro hello show_debug_message("Hello" + \
string(player_name) + \
", how are you today?");
</code></pre>
  This is purely cosmetic, in that splitting a macro like this will have no effect over the result of the final macro when used, and is simply to provide support for multi-line text on macros that have longer lines of code.
  
  
   One very important feature of macros is that they can be defined for use with specific
  <a href="../../../Settings/Configurations.htm">
   Configurations
  </a>
  (configs), meaning you can have the same macro name but give it different values based on the currently selected config. For example, say you have a configuration for Android Ads and another for iOS Ads, then you could define a single macro to hold the required app ID value:
  <pre><code class="language-gml">#macro ad_id "";
#macro Android:ad_id "com.yoyogames.googlegame"
#macro iOS:ad_id "com.yoyogames.appstoregame"
</code></pre>
  As you can see, you give the config name first then a colon
  <span>
   :
  </span>
  and then the macro name and value. Note that you cannot have any white-space between the colon
  <span>
   :
  </span>
  and either the config name nor the macro name otherwise you will get an error.
  <h2>
   Enums
  </h2>
  An enum is an "enumerator", and it essentially permits you to create your own limited data type with a list of constant values, and they have the following structure:
  <pre><code class="language-gml">enum
<i>
 &amp;amp;lt;variable&amp;amp;gt;
</i>
{
<i>
 &amp;amp;lt;constant&amp;amp;gt;
</i>
[=
<i>
 &amp;amp;lt;value&amp;amp;gt;
</i>
],
<i>
 &amp;amp;lt;constant&amp;amp;gt;
</i>
[=
<i>
 &amp;amp;lt;value&amp;amp;gt;
</i>
],
    // etc...
}
</code></pre>
  In the following example, we create an enum for the colours of the rainbow and assign it various constants and default values:
  <pre><code class="language-gml">enum rainbowcolours
{
    red,
    orange,
    yellow,
    green,
    blue,
    indigo,
    violet
}
</code></pre>
  The enum entries can only be
  <b>
   integer numbers
  </b>
  or
  <b>
   <a>
    expression
   </a>
   <span>
    s
   </span>
   with previous enums that evaluate to an integer number
  </b>
  , and by default are numbered from 0 upwards, so our example given above would default to
  <span>
   red = 0
  </span>
  ,
  <span>
   orange = 1
  </span>
  ,
  <span>
   yellow = 2
  </span>
  , etc...
  
  
   You can also assign values to the enum variables at the time of creation:
  <pre><code class="language-gml">enum enum_test
{
    val = 10;
}

enum rainbowcolours
{
    red = 5,
    orange = 5 * 2,
    yellow = 15,
    green = 20,
    blue = 25,
    indigo = 30,
    violet = 35 * enum_test.val
}
</code></pre>
  Notice in the above example we use another enum to create an expression for "violet". This only works if the enum being referenced was created
  <i>
   before
  </i>
  the enum that is using it in an expression, but it will not work for variables or functions, since the enum value must be able to be evaluated as a constant when the project is
  <a>
   Compiling
  </a>
  . Also note that all enum values evaluate to
  <b>
   integer
  </b>
  values, and when you create your own you should be aware that
  <i>
   only integer values are permitted
  </i>
  for enums to work. This value can be any integer number that a floating point double precision number can represent, including negative values.
  
  
   To later access the value within a given enum type, you can use the point
  <span>
   "."
  </span>
  method, like this:
  <pre><code class="language-gml">variable = &amp;amp;lt;enum_name&amp;amp;gt;.&amp;amp;lt;
<em>
 enum_variable
</em>
&amp;amp;gt;;
</code></pre>
  As an example, let's use the "
  <span>
   rainbowcolours
  </span>
  " enum that we created in the code above:
  <pre><code class="language-gml">colour_value = rainbowcolours.green * rainbowcolours.red;
</code></pre>
  The
  <span>
   colour_value
  </span>
  variable would now hold the value 100 (20 * 5).
  
  
   Note that you
  <em>
   cannot
  </em>
  modify the values for any enum constant after it has been created, much the same as you can't modify macros after they have been created.
  <strong>
   NOTE
  </strong>
  : Enum values are stored as int64s, so running
  <span>
   <a href="../../GML_Reference/Variable_Functions/is_real.htm">
    is_real()
   </a>
  </span>
  on them will return
  <span>
   false
  </span>
  .
  <h2>
   Built-In Constants
  </h2>
  The following table shows a list of the built-in constants that can be returned by some functions and operations in your projects:
  <table>
   <tbody>
    <tr>
     <th>
      Constant
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <span>
       pointer_null
      </span>
     </td>
     <td>
      This constant indicates that the pointer is not pointing to anything meaningful (the same as
      <span>
      </span>
      <span>
       NULL
      </span>
      <span>
      </span>
      in C++ or
      <span>
       null
      </span>
      in C#).
          This value is
      <a>
       falsy
      </a>
      .
     </td>
    </tr>
    <tr>
     <td>
      <span>
       pointer_invalid
      </span>
     </td>
     <td>
      This constant simply means that the value is not a valid pointer
     </td>
    </tr>
    <tr>
     <td>
      <span>
       undefined
      </span>
     </td>
     <td>
      This constant is returned when a function has to return
      <em>
       something
      </em>
      but has no appropriate or "correct" value to return.
          This value is
      <a>
       falsy
      </a>
      .
     </td>
    </tr>
    <tr>
     <td>
      <span>
       NaN
      </span>
     </td>
     <td>
      <span>
       This constant that can be returned when the compiler cannot evaluate the results of an operation as a number - for example, 0 / 0 cannot be defined as a real number, and is therefore represented by
      </span>
      <span>
       NaN
      </span>
     </td>
    </tr>
    <tr>
     <td>
      <span>
       infinity
      </span>
     </td>
     <td>
      <span>
       <span>
        <span>
         <font>
          <span>
           This constant
          </span>
         </font>
        </span>
       </span>
      </span>
      <span>
       refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0.
      </span>
     </td>
    </tr>
    <tr>
     <td>
      <span>
       true
      </span>
     </td>
     <td>
      This constant represents the value 1, which is what
      <span>
       GameMaker
      </span>
      will evaluate as a boolean "true" (note that any value equal to or greater than 1 will evaluate as
      <span>
       true
      </span>
      ).
     </td>
    </tr>
    <tr>
     <td>
      <span>
       false
      </span>
     </td>
     <td>
      This constant represents the value 0, which is what
      <span>
       GameMaker
      </span>
      will evaluate as a boolean "false" (note that any value less than or equal to 0 will evaluate as
      <span>
       false
      </span>
      ).
     </td>
    </tr>
    <tr>
     <td>
      <span>
       pi
      </span>
     </td>
     <td>
      This constant represents the value of pi: 3.141592653589793280 etc... although the exact value will depend on various factors like the OS or the platform being targeted.
     </td>
    </tr>
   </tbody>
  </table>
  See
  <a href="../../../Additional_Information/Type_Tables.htm#h">
   Equality Table
  </a>
  for information on equality comparisons for a few of the constants listed above.
 </body>
</html>