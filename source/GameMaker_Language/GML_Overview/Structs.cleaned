<html>
 <head>
 </head>
 <body>
  <h1>
   Structs &amp; Constructors
  </h1>
  A
  <strong>
   struct
  </strong>
  is a variable that holds a collection of other variables. The variables that a struct holds can be of any
  <a href="Data_Types.htm">
   data type
  </a>
  previously mentioned and these variables can be read from and written to after the initial struct declaration, and you can also add more variables to a struct after it has been declared.
  
  
   The variables used in a struct should follow the usual variable naming scheme, i.e.: they cannot start with a number and should only be made up of alphanumeric characters and the underscore "_" character, and also note that the contents of a struct are
  <em>
   independent of the instance or function that created it
  </em>
  , and as such you can - if you wish - use built-in variable names such as
  <span>
   image_index
  </span>
  or
  <span>
   x
  </span>
  and
  <span>
   y
  </span>
  .
  
  
   After the initial creation, structs have no processing overhead while they exist, although they
  <i>
   will
  </i>
  take up space in memory. The struct syntax is as follows:
  <pre><code class="language-gml"><i>
 &amp;amp;lt;variable&amp;amp;gt;
</i>
=
{
<i>
 &amp;amp;lt;variable&amp;amp;gt;
</i>
:
<i>
 &amp;amp;lt;value&amp;amp;gt;
</i>
,
<i>
 &amp;amp;lt;variable&amp;amp;gt;
</i>
:
<i>
 &amp;amp;lt;value&amp;amp;gt;
</i>
,
    etc...
};
</code></pre>
  So, an example of this in practice would be:
  <pre><code class="language-gml">mystruct =
{
    a : 20,
    b : "Hello World"
};
</code></pre>
  The above code creates an instance scope struct in the variable
  <span>
   mystruct
  </span>
  and populates it with some values (structs can be created at local, instance and global scopes, just like any other variable - see the section on
  <a href="Variables_And_Variable_Scope.htm">
   Variables and Variable Scope
  </a>
  for more information). Note that you don't have to populate the contents of a struct when it is created initially and you can create an empty struct by simply doing this:
  <pre><code class="language-gml">mystruct = {};
</code></pre>
  This struct can then be added to at a later point in the game code. Here is an example of a struct with various variables and data types:
  <pre><code class="language-gml">var _xx = 100;
mystruct =
{
    a : 10,
    b : "Hello World",
    c : int64(5),
    d : _xx + 50,
    e : function(a, b)
        {
            return a + b;
        },
    f : [ 10, 20, 30, 40, 50 ],
    g : image_index
};
</code></pre>
  You'll notice in the above code that you can also define methods and use runtime functions in structs, and you can also use local and instance variables within the struct declaration.
  <h3>
   Instance Variables in Struct Declaration?
  </h3>
  For example, you'll notice in the above example that the struct variable "g" is being set to
  <span>
   image_index
  </span>
  , which is an instance variable. You might think that you'd need to use the
  <a href="Instance_Keywords.htm">
   keyword
  </a>
  <span>
   other
  </span>
  in this case to get the instance variable, but this is not necessary. Essentially, when you define a struct
  <strong>
   , all member variables on the left-hand side of the colon ":" are the
   <em>
    struct
   </em>
   variables, and the values and variables on the right-hand side use the scope of whatever is defining the struct
  </strong>
  (in this case, an instance).
  
  
   Let's look at a simple example to illustrate this. Say you want to define a struct with the variables "x" and "y" and you want to set them to the "x" and "y" of the instance defining the struct. In practice the code would look like this:
  <pre><code class="language-gml">mystruct =
{
    x : x,
    y : y
};
</code></pre>
  In the above code the struct member variables
  <span>
   x
  </span>
  and
  <span>
   y
  </span>
  are being set to the values held in the instance variables
  <span>
   x
  </span>
  and
  <span>
   y
  </span>
  , since the right-hand side of the colon ":" refers to the instance that is defining the struct. It is worth noting that this means you
  <em>
   cannot
  </em>
  use struct member variables for defining subsequent variables within the struct declaration. For example, the following would give you an error:
  <pre><code class="language-gml">mystruct =
{
    a : 10,
    b : 10,
    c : a + b
}
</code></pre>
  The error occurs because the variables
  <span>
   a
  </span>
  and
  <span>
   b
  </span>
  are actually being evaluated at the scope of whatever is defining the struct (they are on the right-hand side of the colon ":"), and are
  <em>
   not
  </em>
  the ones being defined within the struct itself.
  <strong>
  </strong>
  <h3>
   <em>
    <strong>
     IMPORTANT!
    </strong>
   </em>
   You
   <strong>
    cannot
   </strong>
   use any built-in
   <em>
    <strong>
     global
    </strong>
   </em>
   scope variables as struct member names, eg:
   <span>
    game_id
   </span>
   or
   <span>
    fps
   </span>
   . You can find a full list of these global variables from the following page:
  </h3>
  <ul>
   <li>
    <a href="Struct_Forbidden_Variables.htm">
     Struct Forbidden Variables
    </a>
   </li>
  </ul>
  Once a struct has been defined, you can access the data within it using the "point" notation, like this:
  <pre><code class="language-gml">mystruct =
{
    a : 20,
    b : "Hello World"
}

mystring = mystruct.b + string(mystruct.a);
</code></pre>
  You can also perform operations on the variables within a struct or use them in functions, just as you would with any other variable. For example:
  <pre><code class="language-gml">mystruct.a += 1;
mystruct.b = mystruct.a + 20;
mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);
</code></pre>
  Finally, structs can have other structs nested inside them, like this:
  <pre><code class="language-gml">mystruct =
{
    a :
    {
        aa : "This is an example"
    },
    b :
    {
        bb : "And another one"
    },
};
</code></pre>
  To access such nested structs you would still use the point notation, like this:
  <pre><code class="language-gml">var _str = mystuct.a.aa + " " + mystruct.b.bb;
show_debug_message(_str);
</code></pre>
  Another way to access data in a struct is by using the
  <a href="Language_Features/with.htm">
   <span>
    with()
   </span>
  </a>
  function. So, for example, you could do this:
  <pre><code class="language-gml">with(mystruct)
{
    a += other.x;
}
</code></pre>
  Using
  <span>
   with()
  </span>
  changes the scope of the code to the given struct where you can manipulate the member variables at the struct scope. Note that in the example we also use the
  <a href="Instance_Keywords.htm">
   <span>
    other
   </span>
   keyword
  </a>
  . This works just like in an instance when using
  <span>
   with()
  </span>
  and will reference the instance (or struct) that is actually running the code block.
  
  
   When a struct is no longer required it can be removed from memory using the
  <a href="Language_Features/delete.htm">
   <span>
    delete
   </span>
  </a>
  operator, which flags the struct as being able to be garbage collected. This is not strictly required as the
  <a>
   garbage collector
  </a>
  may do this automatically if the struct is no longer referenced in your code, but it is good practice to do so and we recommend it (for example, call
  <span>
   delete
  </span>
  in the
  <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">
   Clean Up event
  </a>
  of an instance to explicitly tell the garbage collector that an instance scope struct is to be deleted). Here is an example:
  <pre><code class="language-gml">// Create event
mystruct =
{
    pos_x : x,
    pos_y : y,
    count : 1000
};

// Clean Up event
delete mystruct;
</code></pre>
  <h2>
   Constructor Functions
  </h2>
  You can also use
  <a href="Script_Functions.htm">
   script functions
  </a>
  or
  <a href="Method_Variables.htm">
   methods
  </a>
  to create functions that can be used to generate new structs, which requires the use of the
  <span>
   constructor
  </span>
  keyword for the function and the
  <a href="Language_Features/new.htm">
   <span>
    new
   </span>
  </a>
  operator when creating a struct from such a function. See the following function:
  <pre><code class="language-gml">function Vector2(_x, _y) constructor
{
    x = _x;
    y = _y;

    static Add = function(_vec2)
    {
        x += _vec2.x;
        y += _vec2.y;
    }
}
</code></pre>
  Or, using the method variable syntax:
  <pre><code class="language-gml">Vector2 = function(_x, _y) constructor
{
    x = _x;
    y = _y;

    static Add = function(_vec2)
    {
        x += _vec2.x;
        y += _vec2.y;
    }
}
</code></pre>
  Here we are creating a function called
  <span>
   Vector2
  </span>
  and telling
  <span>
   GameMaker
  </span>
  that this is a function used for creating structs by adding the
  <span>
   constructor
  </span>
  keyword after its definition. You can then call this constructor function like this:
  <pre><code class="language-gml">v2 = new Vector2(10, 10);
</code></pre>
  The variable
  <span>
   v2
  </span>
  will now contain a struct with the variables
  <span>
   x
  </span>
  and
  <span>
   y
  </span>
  and the
  <a href="Functions/Static_Variables.htm">
   static
  </a>
  <a href="Method_Variables.htm">
   method variable
  </a>
  <span>
   Add
  </span>
  .
  
  
   You can also make use of optional arguments in your constructor functions:
  <pre><code class="language-gml">function Vector2(_x = 0, _y = 0) constructor
{
    x = _x;
    y = _y;
}
</code></pre>
  This constructor will now use
  <span>
   0
  </span>
  for the
  <span>
   _x
  </span>
  and
  <span>
   _y
  </span>
  arguments if they are not specified when the function is called. This means that you can create a new
  <span>
   Vector2
  </span>
  struct without having to specify any arguments:
  <pre><code class="language-gml">empty_vector = new Vector2();
</code></pre>
  <h2>
   Inheritance
  </h2>
  Functions created this way will also support single
  <b>
   inheritance
  </b>
  , ie: you can create a constructor function that inherits data from another constructor function.
  <strong>
   NOTE
  </strong>
  : When working with inheritance, you cannot use method variables to define the constructor function, only script functions.
  
  
   For example, we created the
  <span>
   Vector2
  </span>
  constructor function above, so we can then use that as the "parent" for another constructor function, which we'll call
  <span>
   Vector3
  </span>
  :
  <pre><code class="language-gml">function Vector3(_x, _y, _z) : Vector2(_x, _y) constructor
{
    z = _z;

    static Add = function( _vec3 )
    {
        x += _vec3.x;
        y += _vec3.y;
        z += _vec3.z;
    }
}
</code></pre>
  As you can see, when defining the function we use a colon "
  <span>
   :
  </span>
  " to separate the new constructor from the parent constructor to be inherited from. The child constructor (
  <span>
   Vector3
  </span>
  ) passes the
  <span>
   _x
  </span>
  and
  <span>
   _y
  </span>
  arguments into the parent (
  <span>
   Vector2
  </span>
  ) constructor, which are used to run the parent's constructor first, after which the child's constructor is executed. This way the child constructor gets the parent's variables (
  <span>
   x
  </span>
  and
  <span>
   y
  </span>
  ) and can also define its own (
  <span>
   z
  </span>
  ).
  
  
   You can also pass constant values into the parent constructor, so that a certain child constructor always provides the same values to its parent constructor:
  <pre><code class="language-gml">function Item(damage) constructor
{
    my_damage = damage;
}

function BasicSword() : Item(10) constructor
{}

var _basic_sword = new BasicSword();
show_debug_message(_basic_sword.my_damage); // Prints 10
</code></pre>
  This means that the damage of a basic sword will always be
  <span>
   10
  </span>
  , since it passes that value to its parent constructor irrespective of what its own arguments might be.
  
  
   Note that assigning a default value to an argument in a child constructor will override the parent's default value for that argument. See the following example:
  <pre><code class="language-gml">function Parent(value = 10) constructor
{
    show_debug_message(value);
}

function Child(value = 20) : Parent(value) constructor
{
    show_debug_message(value);
}

var _child = new Child();
</code></pre>
  Both of these constructors will print
  <span>
   20
  </span>
  to the output log, as that was the default value for the argument set by the child constructor, and the same value was passed into the parent constructor.
  
  
   For more details on the
  <span>
   new
  </span>
  and
  <span>
   delete
  </span>
  operators, please see the following pages:
  <ul>
   <li>
    <a href="Language_Features/new.htm">
     <span>
      new
     </span>
    </a>
   </li>
   <li>
    <span>
     <a href="Language_Features/delete.htm">
      <span>
       delete
      </span>
     </a>
    </span>
   </li>
  </ul>
  <h2>
   String Output
  </h2>
  One final thing to mention about structs is that you can change what is output to the console from them for debugging. By default, calling the function
  <a href="../GML_Reference/Debugging/show_debug_overlay.htm">
   <span>
    show_debug_message()
   </span>
  </a>
  on a struct will output the contents of the struct (as shown above). However, it's possible to customise this message by adding a specifically named method to the struct called
  <span>
   toString
  </span>
  :
  <pre><code class="language-gml">mystruct =
{
    a : 20,
    b : "Hello World",

    toString : function()
    {
        return "This stuct says " + b + ", " + string(a) + " times!";
    }
}
show_debug_message(mystruct);
</code></pre>
  Now when the
  <span>
   show_debug_message()
  </span>
  function is called, the
  <span>
   toString
  </span>
  method will be used to generate the output and - with the above example - you'll get:
  <pre><code class="language-gml">This struct says Hello World, 20 times!
</code></pre>
  Note that you can also call the
  <a href="../GML_Reference/Strings/Strings.htm">
   <span>
    string()
   </span>
  </a>
  function on a struct reference and use that to display the contents - or the
  <span>
   toString
  </span>
  method - to the screen, or save it to a file, or whatever, eg:
  <pre><code class="language-gml">var _str = string(mystruct);
draw_text(32, 32, _str);
</code></pre>
  Finally, there are a number of runtime functions that you can use on structs to get the variables they contain as well as a few other things. You can find them in the following section:
  <ul>
   <li>
    <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">
     Variable Functions
    </a>
   </li>
  </ul>
 </body>
</html>