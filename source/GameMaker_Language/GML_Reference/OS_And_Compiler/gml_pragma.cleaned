<html>
 <head>
 </head>
 <body>
  <h1>
   gml_pragma
  </h1>
  The
  <span>
   gml_pragma
  </span>
  function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively
  <i>
   pre-processed
  </i>
  before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:
  <ul>
   <li>
    "
    <b>
     forceinline
    </b>
    " - When the function is called with the "forceinline" pragma in a
    <b>
     script function
    </b>
    , the YYC will compile the project with the function inline, rather than referenced. This will give a further processing boost, but care must be taken when using it as it will also inflate the final executable file size, especially if the in-lined code is large and/or used in multiple different places, as well as greatly increase the compile time. Note that this pragma is
    <b>
     only valid when building using the YYC
    </b>
    .
   </li>
   <li>
    "
    <b>
     global
    </b>
    ", "
    <b>
     [gml code]
    </b>
    " - The "global" pragma permits you to call some GML code formatted as a string, at a
    <b>
     global
    </b>
    scope, at compile time, before the first room of the game executes. For example:
    <pre><code class="language-gml">gml_pragma("global", "Init()");
</code></pre>
    This will call the script function "Init" before the first room of the game is run. Note that the GML supplied as the second argument
    <b>
     must be a compile time constant
    </b>
    , and also note that you cannot use this pragma to create instances or perform any operations that require a room (or anything in a room) to function.
   </li>
   <li>
    "
    <b>
     PNGCrush
    </b>
    " - The "PNGCrush" pragma will use the
    <a href="https://pmt.sourceforge.io/pngcrush/">
     PNGCrush
    </a>
    program on each texture created. Note that this can add significantly to the time that it takes to compile the game, so you don't want it on all the time, although it can make significant savings on final file size. This option only applies to Texture Groups that use the PNG format (see
    <a href="../../../Settings/Texture_Groups.htm#h">
     Group Settings
    </a>
    ).
   </li>
   <li>
    "
    <b>
     Texgroup.Scale
    </b>
    ", "
    <b>
     [TextureGroupName]
    </b>
    ", "
    <b>
     [Scale Divisor]
    </b>
    " - The "Texgroup.Scale" will scale the given texture group on compile. You need to give an additional two arguments here: the "[TexGroupName]", which is the name (a string) of the texture group to scale, and the "[Scale Divisor]" (also a string), which is the divisor you wish to use for the scaling, i.e:
    <pre><code class="language-gml">gml_pragma("Texgroup.Scale", "level1", "2");
</code></pre>
    This will half all the textures in the "level1" texture group.
   </li>
   <li>
    "
    <b>
     UnityBuild
    </b>
    ", "
    <b>
     [enable/disable]
    </b>
    " - If you call the function with this pragma and set the enable/disable argument to
    <span>
     true
    </span>
    then on compile it will collapse all the .cpp files in the project into a single file which it then uses to build everything, for example:
    <pre><code class="language-gml">gml_pragma("UnityBuild", "true");
</code></pre>
    The benefit of doing a unity build is that builds are faster but the down side is that it does a
    <i>
     full
    </i>
    build each time so even if you change a single part of the code it will build everything again without using any cached files. This has been added specifically for the Xbox One export using the YYC although it can be called for other builds (
    <b>
     YYC only
    </b>
    ). For more information on unity builds, please see
    <a href="http://buffered.io/posts/the-magic-of-unity-builds/">
     here
    </a>
    .
   </li>
  </ul>
  <b>
   NOTE
  </b>
  : The first argument to the
  <span>
   gml_pragma
  </span>
  function
  <b>
   must be a compile time string constant
  </b>
  and not a variable.
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">gml_pragma(command, [optional...]);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      command
     </td>
     <td>
      <span>
       <a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      A string with one of the commands listed above.
     </td>
    </tr>
    <tr>
     <td>
      [optional]
     </td>
     <td>
      <span>
       <a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      Some of the available commands require an optional argument or arguments. These are explained above for each command.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml">N/A
</code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">gml_pragma("forceinline");
</code></pre>
  The above example code will force the script function where it is used to be in-lined on compile.
 </body>
</html>