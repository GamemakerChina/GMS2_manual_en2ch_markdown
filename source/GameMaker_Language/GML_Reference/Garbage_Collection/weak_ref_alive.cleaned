<html>
 <head>
 </head>
 <body>
  <h1>
   weak_ref_alive
  </h1>
  With this function you can check the
  <a>
   weak reference
  </a>
  to a struct to see if it is still "alive" or not. You supply the weak reference to check (as returned by the function
  <a href="weak_ref_create.htm">
   <span>
    weak_ref_create()
   </span>
  </a>
  ), and the function will return
  <span>
   true
  </span>
  if the struct is still being referenced somewhere or
  <span>
   false
  </span>
  if it's not and has been garbage collected. Note that if you supply a value that is not a weak reference, the function will return
  <span>
   undefined
  </span>
  .
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">weak_ref_alive(weak_ref);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      weak_ref
     </td>
     <td>
      <span>
       <a href="../../../../GameMaker_Language/GML_Reference/Garbage_Collection/weak_ref_create.htm">
        Struct Weak Reference
       </a>
      </span>
     </td>
     <td>
      The weak reference to the struct you want to check.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml"><a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
 Boolean
</a>
(or undefined)
</code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">if weak_ref_alive(inventory_ref)
{
    inventory = -1;
}
</code></pre>
  The above code checks a weak reference to a struct and if it is still alive the variable referencing it is set to -1, de-referencing the struct and enabling it to be garbage collected.
 </body>
</html>