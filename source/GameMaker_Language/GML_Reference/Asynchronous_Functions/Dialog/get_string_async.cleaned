<html>
 <head>
 </head>
 <body>
  <h1>
   get_string_async
  </h1>
  This function opens a window and displays message as well as a space for the user to input a string (which will contain the supplied default string to start with). This is an asynchronous function, and as such
  <span>
   GameMaker
  </span>
  does
  <i>
   not
  </i>
  block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the "Okay" button, an
  <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm">
   asynchronous Dialog event
  </a>
  is triggered which, for the duration of that event
  <i>
   only
  </i>
  , will have a DS map stored in the variable
  <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm">
   <span>
    async_load
   </span>
  </a>
  .
  
  
   This map will contain the three keys, "
  <strong>
   id
  </strong>
  ", "
  <strong>
   status
  </strong>
  ", and "
  <strong>
   result
  </strong>
  ". "id" is the value that was returned by the function when called, the "status" will be either
  <span>
   true
  </span>
  for the "Okay" button being pressed, or
  <span>
   false
  </span>
  if the message was cancelled (where applicable as not all target platforms permit the message to be cancelled). Finally "result" will return the string that the user input (or an empty string "" if none was supplied).
  <strong>
   <em>
    <span>
     NOTE
    </span>
   </em>
  </strong>
  <em>
   This function is
   <span>
    for
    <strong>
     debugging and testing use only
    </strong>
    and should not be used in released games. For that purpose you should create a custom user interface to receive input from players so that you have complete control over how the dialogs look and behave.
   </span>
  </em>
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">get_string_async(string, default);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      string
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The message to show in the dialog.
     </td>
    </tr>
    <tr>
     <td>
      default
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The default string.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml"><a href="../../../../../GameMaker_Language/GML_Reference/Asynchronous_Functions/Asynchronous_Functions.htm">
 Async Request ID
</a></code></pre>
  <h4>
   Extended Example:
  </h4>
  The
  <b>
   left mouse press event
  </b>
  (for example) of the object that is showing the message would have the following code:
  <pre><code class="language-gml">msg = get_string_async("What's your name?","Anon");
</code></pre>
  The above will show a message requesting that the user input a string and press "Okay". The function id is stored in the variable "msg" and will be used in the asynchronous Dialogs event as shown below:
  <pre><code class="language-gml">var i_d = ds_map_find_value(async_load, "id");
if i_d == msg
{
    if ds_map_find_value(async_load, "status")
    {
        if ds_map_find_value(async_load, "result") != ""
        {
            global.Name = ds_map_find_value(async_load, "result");
        }
    }
}
</code></pre>
  The above code checks the "id" key of the returned
  <span>
   DS Map
  </span>
  against the value stored in the variable "msg". If they are the same, it then checks to see if "Okay" was pressed (rather than the window being closed/cancelled) and if it returns
  <span>
   true
  </span>
  it then checks the "result" of a string to make sure that no empty strings were returned before setting a global variable.
 </body>
</html>