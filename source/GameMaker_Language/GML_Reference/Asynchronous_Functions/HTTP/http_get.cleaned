<html>
 <head>
 </head>
 <body>
  <h1>
   http_get
  </h1>
  With this function, you connect to the specified URL in order to retrieve information. As this is an asynchronous function,
  <span>
   GameMaker
  </span>
  will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an
  <b>
   Async Event
  </b>
  in any instance that has one defined in their object properties. You should also note that HTTP request parameters (the bits sometimes "tacked on" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function, for example:
  <pre><code class="language-gml">http_get("http://www.YoYoGames.com/logon?username="+name);
</code></pre>
  will pass the string held in the variable "name" to the server as well a retrieve the data from that URL. So, essentially, any time a simple, short piece of data needs to be passed from the client to the server, this would be reasonable choice as the function to use.
  <b>
   NOTE
  </b>
  : You should be aware that due to XSS protection in browsers, requests to and attempts to load resources from across domains are blocked and may appear to return blank results. Please see the section on
  <a href="HTTP.htm">
   Cross Domain Issues
  </a>
  for further details.
  
  
   This function will generate multiple "call backs" which are picked up by any
  <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm">
   HTTP Events
  </a>
  . These will generate a
  <a href="../../Data_Structures/DS_Maps/DS_Maps.htm">
   <span>
    DS Map
   </span>
  </a>
  (more commonly known as a "dictionary") that is exclusive to this event and is stored in the special variable
  <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm">
   <b>
    async_load
   </b>
  </a>
  . This DS map will contain different values depending on whether there is data being returned or not. For example, if you have requested a file, the event will trigger multiple times as each packet of data is received so that you can show a progress bar, for example. The general structure for the DS map will be as follows:
  <ul>
   <li>
    <b>
     id:
    </b>
    The ID which was returned from the command. If you fire off a series of
    <span>
     http_
    </span>
    requests then you need to know which one you are getting the reply to, and so you would use this value to compare to the value you stored when you originally sent the request to find the right one.
   </li>
   <li>
    <b>
     status:
    </b>
    Returns a value of less than 0 for an error, 0 for complete and 1 for receiving packets (see below for more details).
   </li>
   <li>
    <b>
     result:
    </b>
    The data received (string only).
   </li>
   <li>
    <b>
     url:
    </b>
    The complete URL you requested.
   </li>
   <li>
    <b>
     http_status:
    </b>
    The raw http status code (if available). This returns the standard web status code for most browsers, eg: 304 for "Not Modified" or 204 for "No Content", etc...
   </li>
  </ul>
  If there are multiple packets being returned to your game, the callback "status" key will return 1, in which case the DS map will have the following additional keys:
  <ul>
   <li>
    <b>
     "contentLength":
    </b>
    This is the size of file that the web server has said you should expect to receive (may be -1 if the server does not return this data).
   </li>
   <li>
    <b>
     "sizeDownloaded":
    </b>
    The size of the data that has already been downloaded.
   </li>
  </ul>
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">http_get(url);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      url
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The web address of the server that you wish to get information from
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml"><a href="../../../../../GameMaker_Language/GML_Reference/Asynchronous_Functions/Asynchronous_Functions.htm">
 Async Request ID
</a></code></pre>
  <h4>
   Extended Example:
  </h4>
  The
  <span>
   http_get()
  </span>
  function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:
  <pre><code class="language-gml">get = http_get("http://www.MacSweeneyGames.com/logon?username=" + name);
</code></pre>
  The above code will pass the string held in the variable "name" to the given server as well as retrieve the data from that URL, triggering an Async Event which will contain the async_load DS map (the async_load map index will be stored in the variable "get" so you can check for the correct callback). The Async Event triggered would be the
  <b>
   HTTP
  </b>
  sub-event, and in that event you would have the following:
  <pre><code class="language-gml">if ds_map_find_value(async_load, "id") == get
{
    if ds_map_find_value(async_load, "status") == 0
    {
        r_str = ds_map_find_value(async_load, "result");
    }
    else
    {
        r_str = "null";
    }
}
</code></pre>
  The above code will first check the id of the DS map that has been created, then check the "status" of the callback. If the value is equal to 0 (signalling success) the result from the callback will then be stored in a variable for future use, otherwise the variable will be set to a default value (in this case "null").
 </body>
</html>