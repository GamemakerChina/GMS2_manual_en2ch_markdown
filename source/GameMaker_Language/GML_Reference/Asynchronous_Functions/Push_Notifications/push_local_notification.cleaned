<html>
 <head>
 </head>
 <body>
  <h1>
   push_local_notification
  </h1>
  This function can be used to set a local notification to be shown on a given date at a given time. The "fire_time" is the date/time that the notification should be pushed to the user device (you can use the
  <span>
   GameMaker
  </span>
  <a href="../../Maths_And_Numbers/Date_And_Time/Date_And_Time.htm">
   Date and Time Functions
  </a>
  to get this), and you can give the notification a title and a message text as well as a payload string which will be passed to your game when the users taps the notification.
  <b>
   NOTE
  </b>
  : The "title" argument is ignored on iOS and the game name is shown instead.
  
  
   Tapping the notification will start the game on the device and trigger an
  <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Push_Notifications.htm">
   Asynchronous Push Notification
  </a>
  event where the
  <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm">
   <span>
    async_load
   </span>
  </a>
  DS map can then be parsed to check the payload string and perform whatever action is required.
  <b>
   NOTE
  </b>
  : This functionality is limited to the
  <b>
   iOS
  </b>
  and
  <b>
   Android
  </b>
  target modules.
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">push_local_notification(fire_time, title, message, data);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      fire_time
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_current_datetime.htm">
        Datetime
       </a>
      </span>
     </td>
     <td>
      The date/time to fire the off the notification
     </td>
    </tr>
    <tr>
     <td>
      title
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The notification title (a string)
     </td>
    </tr>
    <tr>
     <td>
      message
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The notification message text (a string)
     </td>
    </tr>
    <tr>
     <td>
      data
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The data package to send to your game (a string)
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml">N/A
</code></pre>
  <h4>
   Extended Example
  </h4>
  In this example we will send a local push notification using the following code:
  <pre><code class="language-gml">var fireTime = date_inc_day(date_current_datetime(), 1);
var data = "daily_reward";
push_local_notification(fireTime, "Ahoy!", "Catch The Haggis Has A Present", data);
</code></pre>
  This will set a timer to "push" a notification to the device when one day has passed. When the day is up, if your game is either in the background or not running, a notification will be shown to the user with the given title and message (on iOS, the game name is shown and the title is ignored), and then an asynchronous Push Notification Event will be called. Note that if the game is in the foreground when the time for the notification comes, it will
  <i>
   not
  </i>
  be shown, but the asynchronous event
  <b>
   will still trigger
  </b>
  . In the event itself you would handle the callback something like this:Async Event in the following way:
  <pre><code class="language-gml">var type = ds_map_find_value(async_load, "type");
var status = ds_map_find_value(async_load, "status");
if status == 0
{
    //error of some kind
    var error = ds_map_find_value(async_load, "error");
    show_debug_message("error=" + string(error));
}
else
{
    if type == "register"
    {
        global.reg_id = ds_map_find_value(async_load, "reg_id");
    }
    else
    {
        var data = ds_map_find_value(async_load, "data");
        if data == "daily_reward"
        {
            global.Gold += 1000;
        }
    }
}
</code></pre>
 </body>
</html>