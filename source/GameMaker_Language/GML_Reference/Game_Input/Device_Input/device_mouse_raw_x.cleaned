<html>
 <head>
 </head>
 <body>
  <h1>
   device_mouse_raw_x
  </h1>
  This function returns the raw x position of a touch on the device. What this means is that it returns the actual device definition of the x position that is being touched,
  <i>
   not
  </i>
  the
  <span>
   GameMaker
  </span>
  one, and as such will ignore things like view position and scaling. Note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs
  <b>
   NOTE
  </b>
  : This function is very much device dependent and you should experiment first with the desired target module and device to see what exactly is returned.
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">device_mouse_raw_x(device);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      device
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        Real
       </a>
      </span>
     </td>
     <td>
      The device (from 0 -
      <i>
       n
      </i>
      ) that is being checked.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
 Real
</a></code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">if device_mouse_check_button(0, mb_left) &amp;amp;amp;&amp;amp;amp; device_mouse_check_button(1, mb_left)
{
    x_av = mean(device_mouse_raw_x(0), device_mouse_raw_x(1));
    y_av = mean(device_mouse_raw_y(0), device_mouse_raw_y(1));
}
</code></pre>
  The above code checks to see if device1 and device2 are being pressed, and if they are it calculates the average position of the x/y coordinates between each press point.
 </body>
</html>