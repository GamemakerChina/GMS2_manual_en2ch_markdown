<html>
 <head>
 </head>
 <body>
  <h1>
   keyboard_set_map
  </h1>
  Sometimes when making a game you may wish one key to do the same as another. For example many people use the keys WASD for movement, but then many people
  <i>
   also
  </i>
  use the arrow keys! So, what to do? Well, you
  <i>
   could
  </i>
  code the movement system
    twice, but that is a bit complicated and thankfully redundant as this function permits you to "map" one key to another and so any input from either key will be interpreted as the same. To do this you choose a key that you want to map (key2
    - this will be the key that you write the code for) and a key that you want it to be mapped
  <i>
   to
  </i>
  (key1). After that, keypresses to either key will be interpreted by
  <span>
   GameMaker
  </span>
  as coming from key2. You can also use this function to design
    a system where the user can define their own keys for playing by simply mapping the user input key to the key that you have coded into the game.
  
  
   The function takes a keycode value as returned by the function
  <a href="../../Strings/ord.htm">
   <span>
    ord()
   </span>
  </a>
  (only
  <i>
   capital
  </i>
  letters from A-Z or numbers from 0-9), or any of the
  <span>
   vk_*
  </span>
  constants listed on the main
  <a href="Keyboard_Input.htm">
   Keyboard Input
  </a>
  page.
  <strong>
   IMPORTANT!
  </strong>
  The key you are mapping to (key1) will no longer be usable as it's actual key symbol once you use this function. For example, if you map the up-arrow to "W" then you will no longer be able to detect the press
    of the "W" key as a "W", it will always be considered as the up-arrow. To undo this, either map the key to itself - so both key1 and key2 would be
  <span>
   ord("W")
  </span>
  - or use the function
  <span>
   <a href="keyboard_unset_map.htm">
    keyboard_unset_map()
   </a>
  </span>
  .
  <h4>
   <b>
    Syntax:
   </b>
  </h4>
  <pre><code class="language-gml">keyboard_set_map(key1, key2);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      key1
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm">
        Virtual Key Constant (vk_*)
       </a>
      </span>
     </td>
     <td>
      This is the key that key1 is to be mapped to
     </td>
    </tr>
    <tr>
     <td>
      key2
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm">
        Virtual Key Constant (vk_*)
       </a>
      </span>
     </td>
     <td>
      This is the key that is to be mapped
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   <b>
    Returns:
   </b>
  </h4>
  <pre><code class="language-gml"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
 Boolean
</a></code></pre>
  <h4>
   <b>
    Example:
   </b>
  </h4>
  <pre><code class="language-gml">keyboard_set_map(ord("A"), vk_left);
</code></pre>
  The above example code will map the "A" key to the left arrow key. This means that the player can use either the "A"
  <i>
   or
  </i>
  the left arrow key, and that all code written for the left arrow will also respond to the "A"
    key being used instead.
 </body>
</html>