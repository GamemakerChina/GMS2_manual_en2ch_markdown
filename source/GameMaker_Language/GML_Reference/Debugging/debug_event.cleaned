<html>
 <head>
 </head>
 <body>
  <h1>
   debug_event
  </h1>
  This function generates a custom debug event that will be shown in the Graph View of the debugger when a game is being run in
  <a href="../../../Introduction/Debugging.htm">
   Debug Mode
  </a>
  . If you require messages to be displayed when
  <i>
   not
  </i>
  in debug mode, use
  <a href="show_debug_message.htm">
   <span>
    show_debug_message()
   </span>
  </a>
  .
  
  
   The function will also take two reserved strings to help perform debugging using external applications like Visual Studio. These strings are:
  <ul>
   <li>
    "
    <span>
     OutputDebugOn
    </span>
    " - This enables a call to
    <span>
     OutputDebugString
    </span>
    for the
    <b>
     Windows
    </b>
    target, which means that all debug output - everything you see in the Output window - can be viewed by Visual Studio or by 3rd party apps.
   </li>
   <li>
    "
    <span>
     OutputDebugOff
    </span>
    " - Disables the behaviour described above.
   </li>
   <li>
    "
    <span>
     BreakOnError
    </span>
    " - This option is for
    <b>
     Windows YYC
    </b>
    builds only, and means that projects will
    <i>
     not
    </i>
    display the usual code error screen if the runtime detects an error, but instead just carry on and crash. This allows you to see the stacktrace within Visual Studio if debugging.
   </li>
   <li>
    "
    <span>
     ResourceCounts
    </span>
    " - Lists all the currently active resources, such as Data Structures, Time Sources, Surfaces, etc.
   </li>
   <li>
    "
    <span>
     DumpMemory
    </span>
    " - Gives information on the current memory usage.
   </li>
  </ul>
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">debug_event(string)
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      string
     </td>
     <td>
      <span>
       <a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The custom debug event string to use.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml">N/A
</code></pre>
  <h4>
   <b>
    Example:
   </b>
  </h4>
  <pre><code class="language-gml">if !surface_exists(global.EffectsSurface)
{
    debug_event("Recreating Effects Surface");
    global.EffectsSurface = surface_create(room_width, room_height);
}
</code></pre>
  The above code checks to see if an surface exists and if it does not, a debug event is triggered in the graph view of the debugger (the game must have been run in Debug Mode for this to be visible) and the surface is recreated.
 </body>
</html>