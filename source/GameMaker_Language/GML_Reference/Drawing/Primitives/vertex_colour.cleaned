<html>
 <head>
 </head>
 <body>
  <h1>
   vertex_colour
  </h1>
  If your defined vertex format takes a colour value you can use this function to add that data to the vertex being defined for the current primitive. The function needs a buffer to store the data in and will take either a
  <a href="../Colour_And_Alpha/Colour_And_Alpha.htm">
   colour constant
  </a>
  , or a hex value (using the standard
  <span>
   GameMaker
  </span>
  format of BGR, eg: $FF0000 for blue) as well as an alpha value from 0 (transparent) to 1 (fully opaque).
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">vertex_colour(buffer, colour, alpha);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      buffer
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer.htm">
        Vertex Buffer ID
       </a>
      </span>
     </td>
     <td>
      The buffer to write the information to.
     </td>
    </tr>
    <tr>
     <td>
      colour
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm">
        Colour
       </a>
      </span>
     </td>
     <td>
      The colour for this vertex (can be a constant or a hex value).
     </td>
    </tr>
    <tr>
     <td>
      alpha
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        Real
       </a>
      </span>
     </td>
     <td>
      The alpha value for the vertex (from 0 to 1).
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml">N/A
</code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">vertex_colour(b, c_white, 1);
</code></pre>
  The above code will set the vertex being defined to be white with an alpha value of 1.
 </body>
</html>