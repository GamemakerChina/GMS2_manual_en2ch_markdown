<html>
 <head>
 </head>
 <body>
  <h1>
   gpu_set_blendmode_ext
  </h1>
  When
  <span>
   GameMaker
  </span>
  goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colourÂ (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.
  
  
   This function permits you to set the different component parts that should be factored together to create a custom blend mode. The source and destination both have a red, green, blue and alpha component, and in the following chart the source's RGBA are considered (Rs, Gs, Bs, As) while the destination's are (Rd, Gd, Bd, Ad). The eleven constants that are available for use can be either source or destination (or both) when used in this function.
  <table>
   <tbody>
    <tr>
     <th>
      Constant
     </th>
     <th>
      Blend factor (Red, Green, Blue, Alpha)
     </th>
    </tr>
    <tr>
     <td>
      bm_zero
     </td>
     <td>
      (0, 0, 0, 0)
     </td>
    </tr>
    <tr>
     <td>
      bm_one
     </td>
     <td>
      (1, 1, 1, 1)
     </td>
    </tr>
    <tr>
     <td>
      bm_src_colour
     </td>
     <td>
      (Rs, Gs, Bs, As)
     </td>
    </tr>
    <tr>
     <td>
      bm_inv_src_colour
     </td>
     <td>
      (1-Rs, 1-Gs, 1-Bs, 1-As)
     </td>
    </tr>
    <tr>
     <td>
      bm_src_alpha
     </td>
     <td>
      (As, As, As, As)
     </td>
    </tr>
    <tr>
     <td>
      bm_inv_src_alpha
     </td>
     <td>
      (1-As, 1-As, 1-As, 1-As)
     </td>
    </tr>
    <tr>
     <td>
      bm_dest_alpha
     </td>
     <td>
      (Ad, Ad, Ad, Ad)
     </td>
    </tr>
    <tr>
     <td>
      bm_inv_dest_alpha
     </td>
     <td>
      (1-Ad, 1-Ad, 1-Ad, 1-Ad)
     </td>
    </tr>
    <tr>
     <td>
      bm_dest_colour
     </td>
     <td>
      (Rd, Gd, Bd, Ad)
     </td>
    </tr>
    <tr>
     <td>
      bm_inv_dest_colour
     </td>
     <td>
      (1-Rd, 1-Gd, 1-Bd, 1-Ad)
     </td>
    </tr>
    <tr>
     <td>
      bm_src_alpha_sat
     </td>
     <td>
      (f, f, f, 1) where f = min(As, 1-Ad)
     </td>
    </tr>
   </tbody>
  </table>
  <b>
   IMPORTANT!
  </b>
  HTML5 without WebGL enabled will
  <b>
   not
  </b>
  be able to display the following modes correctly:
  <ul>
   <li>
    <span>
     bm_src_colour
    </span>
   </li>
   <li>
    <span>
     bm_inv_src_colour
    </span>
   </li>
   <li>
    <span>
     bm_dest_colour
    </span>
   </li>
   <li>
    <span>
     bm_inv_dest_colour
    </span>
   </li>
   <li>
    <span>
     bm_src_alpha_sat
    </span>
   </li>
  </ul>
  Note that you can either supply two individual arguments to this function or you can supply an array of arguments (as returned by the function
  <a href="gpu_get_blendmode_ext.htm">
   <span>
    gpu_get_blendmode_ext()
   </span>
  </a>
  for example). If supplying an array it should have the following two elements:
  <ul>
   <li>
    [0] = Source blend mode (default is
    <span>
     bm_src_alpha
    </span>
    )
   </li>
   <li>
    [1] = Destination blend mode (default is
    <span>
     bm_inv_src_alpha
    </span>
    )
   </li>
  </ul>
  To help you get the most from blend modes and to help understand how they work and how they affect the final image being drawn to the screen, we recommend that you read the following guide:
  <ul>
   <li>
    <a href="../../../../Additional_Information/Guide_To_Using_Blendmodes.htm">
     Guide To Using Blendmodes
    </a>
   </li>
  </ul>
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">gpu_set_blendmode(src, dest);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      src
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm">
        Blend Mode Factor Constant
       </a>
      </span>
     </td>
     <td>
      Source blend mode factor (see constants above).
     </td>
    </tr>
    <tr>
     <td>
      dest
     </td>
     <td>
      <span>
       <a href="../../../../../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm">
        Blend Mode Factor Constant
       </a>
      </span>
     </td>
     <td>
      Destination blend mode factor (see constants above)
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml">N/A
</code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">gpu_set_blendmode_ext(bm_src_alpha, bm_one);
draw_circle_colour(100, 100, 50, c_white, c_black, 0);
gpu_set_blendmode(bm_normal);
</code></pre>
  This will turn the black into transparency, creating a 'glow' effect from the white being strong on the outside and gradually weakening further from the circle centre. The blend mode is reset after the circle is drawn to ensure additive blending is not also applied to everything else after it.
 </body>
</html>