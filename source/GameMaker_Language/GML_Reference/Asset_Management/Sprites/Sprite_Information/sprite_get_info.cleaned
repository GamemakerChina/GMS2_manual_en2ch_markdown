<html>
 <head>
 </head>
 <body>
  <h1>
   sprite_get_info
  </h1>
  This function is used to retrieve information for the given sprite. You supply a sprite index (which can be an asset added through the
  <a href="../../../../../Introduction/The_Asset_Browser.htm">
   Asset Browser
  </a>
  or a sprite
  <a href="../Sprite_Manipulation/sprite_add.htm">
   added
  </a>
  at runtime) and the function returns a
  <a href="../../../../GML_Overview/Structs.htm">
   struct
  </a>
  with the following variables:
  <table>
   <colgroup>
    <col/>
    <col/>
    <col/>
   </colgroup>
   <tbody>
    <tr>
     <th>
      <span>
       <a href="../../../../../../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_info.htm">
        Sprite Info Struct
       </a>
      </span>
     </th>
    </tr>
    <tr>
     <th>
      Variable
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       width
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The sprite's width (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       height
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The sprite's height (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       xoffset
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The sprite's X offset/origin (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       yoffset
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The sprite's Y offset/origin (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       transparent
      </strong>
     </td>
     <td>
      boolean
     </td>
     <td>
      <span>
       true
      </span>
      if the sprite is marked as transparent, otherwise
      <span>
       false
      </span>
      <span>
       (This can only be specified through
       <span>
        <a href="../Sprite_Manipulation/sprite_add.htm">
         sprite_add()
        </a>
       </span>
       or similar functions, and will be
       <span>
        false
       </span>
       for sprites created in the IDE)
      </span>
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       smooth
      </strong>
     </td>
     <td>
      boolean
     </td>
     <td>
      <span>
       true
      </span>
      if the sprite is marked as smooth, otherwise
      <span>
       false
      </span>
      <span>
       <span>
        (This can only be specified through
        <span>
         <a href="../Sprite_Manipulation/sprite_add.htm">
          sprite_add()
         </a>
        </span>
        or similar functions, and will be
        <span>
         false
        </span>
        for sprites created in the IDE)
       </span>
       <span>
       </span>
      </span>
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       type
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The type of the sprite:
      <span>
       0
      </span>
      - Bitmap (Regular sprites)
      <span>
       1
      </span>
      - SWF
      <span>
       2
      </span>
      - Spine
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       bbox_left
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Position of the left edge of the bounding box (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       bbox_top
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Position of the top edge of the bounding box (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       bbox_right
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Position of the right edge of the bounding box (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       bbox_bottom
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Position of the bottom edge of the bounding box (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       name
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      The name of the sprite
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       num_subimages
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The number of sub-images (or frames) in the sprite
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       use_mask
      </strong>
     </td>
     <td>
      boolean
     </td>
     <td>
      <span>
       true
      </span>
      if this sprite uses a collision mask, otherwise
      <span>
       false
      </span>
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       num_masks
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The number of masks in this sprite (will be greater than 1 if the sprite uses per-frame masks)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       nineslice
      </strong>
      <strong>
      </strong>
     </td>
     <td>
      struct
     </td>
     <td>
      The
      <a href="../Nine_Slice_Struct.htm">
       Nine Slice struct
      </a>
      for this sprite, or
      <span>
       undefined
      </span>
      if it has no nine slice data
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       messages
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array of broadcast messages for this sprite, where each broadcast message is a struct containing information on the message (more information under "General Sprite Data")
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       frame_info
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array of frames for this sprite, where each frame is a struct containing information on its timing (more information under "General Sprite Data")
     </td>
    </tr>
   </tbody>
  </table>
  <strong>
   This additional variable is available only for Bitmap (regular) sprites:
  </strong>
  <table>
   <colgroup>
    <col/>
    <col/>
    <col/>
   </colgroup>
   <tbody>
    <tr>
     <th>
      <span>
       <a href="../../../../../../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_info.htm">
        Sprite Info Struct
       </a>
      </span>
     </th>
    </tr>
    <tr>
     <th>
      Variable
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       frames
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array of frames for this sprite, where each frame is a struct containing information on its texture (more information under "Bitmap Sprite Data")
     </td>
    </tr>
   </tbody>
  </table>
  <strong>
   These additional variables are available only for Spine sprites:
  </strong>
  <table>
   <colgroup>
    <col/>
    <col/>
    <col/>
   </colgroup>
   <tbody>
    <tr>
     <th>
      <span>
       <a href="../../../../../../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_info.htm">
        Sprite Info Struct
       </a>
      </span>
     </th>
    </tr>
    <tr>
     <th>
      Variable
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       num_atlas
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The number of atlas textures used
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       atlas_texture
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array of texture IDs used for the atlas
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       premultiplied
      </strong>
     </td>
     <td>
      boolean
     </td>
     <td>
      <span>
       true
      </span>
      if this sprite is marked as premultiplied, otherwise
      <span>
       false
      </span>
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       animation_names
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array containing the names of each animation in this sprite
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       skin_names
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array containing the names of each skin in this sprite
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       bones
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array containing structs for each bone in this sprite (more information under "Spine Sprite Data")
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       slots
      </strong>
     </td>
     <td>
      array
     </td>
     <td>
      Array containing structs for each slot in this sprite (more information under "Spine Sprite Data")
     </td>
    </tr>
   </tbody>
  </table>
  The function will return
  <span>
   undefined
  </span>
  if the given sprite doesn't exist. Also note that information returned in this struct should be considered
  <strong>
   read-only
  </strong>
  as modifying any of these variables will not affect the sprite.
  
  
   The sections below contain information on the arrays and structs included in the returned struct based on the sprite type:
  <a href="#">
   <span>
    General Sprite Data
   </span>
   <span>
    General Sprite Data
   </span>
  </a>
  This section contains information on variables included in the struct for all kinds of sprites.
   
   
    The
  <span>
   messages
  </span>
  variable is an array that contains information on the broadcast messages that exist in the given sprite. Each broadcast message in this array is a struct containing the following variables:
  <table>
   <tbody>
    <tr>
     <th>
      Variable Name
     </th>
     <th>
      Data Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       frame
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The timing of this broadcast message from the start of the animation (in frames)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       message
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      The broadcast message string
     </td>
    </tr>
   </tbody>
  </table>
  The
  <span>
   frame_info
  </span>
  variable is an array that contains information on the timings of the sprite's frames. Each frame in this array is a struct containing the following variables:
  <table>
   <tbody>
    <tr>
     <th>
      Variable Name
     </th>
     <th>
      Data Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       frame
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The timing for the start of this frame (in frames)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       image_index
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The image index of this frame
     </td>
    </tr>
   </tbody>
  </table>
  <a href="#">
   <span>
    Bitmap Sprite Data
   </span>
   <span>
    Bitmap Sprite Data
   </span>
  </a>
  This section contains information on variables included in the struct for Bitmap sprites (sprites that are not Spine or SWF type sprites).
   
   
    The
  <span>
   frames
  </span>
  variable is an array that contains information on the textures of the sprite's frames. Each frame in this array is a struct containing the following variables:
  <table>
   <tbody>
    <tr>
     <th>
      Variable Name
     </th>
     <th>
      Data Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       x
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The X position of this frame on its texture page (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       y
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The Y position of this frame on its texture page (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       w
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The logical width of the frame (in pixels) used internally
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       h
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The logical height of the frame (in pixels) used internally
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       texture
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The texture page ID for this frame
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       original_width
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The original width of the frame (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       original_height
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The original height of the frame (in pixels)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       crop_width
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The actual width of the frame on the texture page after cropping and scaling (since
      <span>
       GameMaker
      </span>
      automatically trims the empty space around an image, and also scales it down if it doesn't fit)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       crop_height
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The actual height of the frame on the texture page after cropping and scaling
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       x_offset
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The X offset from the left edge of the original image to the left edge of the cropped section
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       y_offset
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The Y offset from the top edge of the original image to the top edge of the cropped section
     </td>
    </tr>
   </tbody>
  </table>
  <a href="#">
   <span>
    Spine Sprite Data
   </span>
   <span>
    Spine Sprite Data
   </span>
  </a>
  This section contains information on variables included in the struct for Spine sprites.
   
   
    The
  <span>
   bones
  </span>
  variable is an array that contains information on all bones in the given Spine sprite. Each bone in this array is a struct containing the following variables:
  <table>
   <tbody>
    <tr>
     <th>
      Variable Name
     </th>
     <th>
      Data Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       parent
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      The name of the parent bone, or
      <span>
       undefined
      </span>
      if this bone doesn't have a parent
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       name
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      The name of this bone
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       index
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The index of this bone
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       length
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The length of this bone
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       x
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The X position of this bone
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       y
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The Y position of this bone
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       rotation
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The rotation of this bone
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       scale_x
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      (Internal to Spine) Scale value on X
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       scale_y
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      (Internal to Spine) Scale value on Y
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       shear_x
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      (Internal to Spine) Shear value on X
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       shear_y
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      (Internal to Spine) Shear value on Y
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       transform_mode
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      (Internal to Spine) The transform mode
     </td>
    </tr>
   </tbody>
  </table>
  <strong>
   NOTE
  </strong>
  : Please consult the
  <a href="http://en.esotericsoftware.com/spine-documentation">
   Spine documentation
  </a>
  for more information regarding Spine's internal variables.
   
   
    The
  <span>
   slots
  </span>
  variable is an array that contains information on all slots in the given Spine sprite. Each slot in this array is a struct containing the following variables:
  <table>
   <tbody>
    <tr>
     <th>
      Variable Name
     </th>
     <th>
      Data Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <strong>
       name
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      The name of the slot
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       index
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      The index of the slot
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       bone
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      The name of the slot's bone, or
      <span>
       "(none)"
      </span>
      if there is no bone for this slot
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       attachment
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      Attachment name
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       red
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Red component of the slot's colour (0-1)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       green
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Green component of the slot's colour (0-1)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       blue
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Blue component of the slot's colour (0-1)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       alpha
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Alpha component of the slot's colour (0-1)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       blendMode
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      (Internal to Spine) Blend mode for the slot
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       dark_red*
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Red component of the slot's
      <strong>
       dark
      </strong>
      colour (0-1)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       dark_green*
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Green component of the slot's
      <strong>
       dark
      </strong>
      colour (0-1)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       dark_blue*
      </strong>
     </td>
     <td>
      real
     </td>
     <td>
      Blue component of the slot's
      <strong>
       dark
      </strong>
      colour (0-1)
     </td>
    </tr>
    <tr>
     <td>
      <strong>
       dark_alpha*
      </strong>
     </td>
     <td>
      string
     </td>
     <td>
      Alpha component of the slot's
      <strong>
       dark
      </strong>
      colour (0-1)
     </td>
    </tr>
   </tbody>
  </table>
  *
  <strong>
   NOTE
  </strong>
  : The dark color variables are only available if the slot has
  <a href="http://en.esotericsoftware.com/spine-slots#Tint-black">
   Tint Black
  </a>
  enabled.
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">sprite_get_info(index);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      index
     </td>
     <td>
      <span>
       <a href="../../../../../../The_Asset_Editors/Sprites.htm">
        Sprite Asset
       </a>
      </span>
     </td>
     <td>
      The index of the sprite to get the information for.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns
  </h4>
  <pre><code class="language-gml"><a href="../../../../../../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_info.htm">
 Sprite Info Struct
</a>
(or
<a href="../../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
 undefined
</a>
)
</code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">var _info = sprite_get_info(sprite_index);

if (_info != undefined &amp;amp;amp;&amp;amp;amp; _info.type == 0)
{
    var _messages = _info.messages;
    var _messageCount = array_length(_messages);
    
    for (var i = 0; i &amp;amp;lt; _messageCount; i ++)
    {
        var _message = _messages[i];
        show_debug_message("Message at frame " + string(_message.frame) + ": " + _message.message);
    }
}
</code></pre>
  The above code gets the info struct for the instance's sprite, and then checks if it's not
  <span>
   undefined
  </span>
  and that its type is 0 (meaning that it's a bitmap sprite). In that case, it gets the broadcast message array for that sprite and then runs a for loop to print each broadcast message (along with its frame) to the output log.
 </body>
</html>