<html>
 <head>
 </head>
 <body>
  <h1>
   sprite_save
  </h1>
  This function can be used to save any sub-image of a sprite to disc, giving it the specified filename. The sprite must have been
  <a href="sprite_add.htm">
   added
  </a>
  at runtime (you cannot save sprites added through the IDE) and the file must be saved withÂ a
  <span>
   *.png
  </span>
  extension.
  <b>
   NOTE
  </b>
  : Depending on the target platform that is chosen you are limited as to where you can save and load files from. See
  <a href="../../../../../Additional_Information/The_File_System.htm">
   File Handling
  </a>
  for more information.
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">sprite_save(ind, subimg, fname);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      ind
     </td>
     <td>
      <span>
       <a href="../../../../../../The_Asset_Editors/Sprites.htm">
        Sprite Asset
       </a>
      </span>
     </td>
     <td>
      The index of the sprite to save.
     </td>
    </tr>
    <tr>
     <td>
      subimg
     </td>
     <td>
      <span>
       <a href="../../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        Real
       </a>
      </span>
     </td>
     <td>
      The sub-image of the sprite to save.
     </td>
    </tr>
    <tr>
     <td>
      fname
     </td>
     <td>
      <span>
       <a href="../../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        String
       </a>
      </span>
     </td>
     <td>
      The filename for the saved sprite.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns
  </h4>
  <pre><code class="language-gml">N/A
</code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">var surf, spr_custom;
surf = surface_create(32, 32);
surface_set_target(surf);
draw_clear_alpha(c_black, 0);
draw_sprite(spr_Body, 0, 0, 0);
draw_sprite(spr_Clothes, 0, 0, 0);
draw_sprite(spr_Hair, 0, 0, 0);
spr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16);
surface_reset_target();
surface_free(surf);
sprite_save(spr_custom, 0, "Player_Custom_Sprite.png");
sprite_delete(spr_Custom);
</code></pre>
  The above code creates a surface and stores its index in the local variable "surf". It then targets that surface, clears it and draws several sprites on top of each other. It creates a new sprite from the composite image drawn on the surface and assigns its index to the local variable "spr_Custom" before freeing up the memory used by the surface. Finally, the resulting sprite is saved to a file and then removed from memory too.
 </body>
</html>