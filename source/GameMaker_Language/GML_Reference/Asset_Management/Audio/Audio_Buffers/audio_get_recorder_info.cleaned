<html>
 <head>
 </head>
 <body>
  <h1>
   audio_get_recorder_info
  </h1>
  This function will return a
  <a href="../../../Data_Structures/DS_Maps/DS_Maps.htm">
   DS Map
  </a>
  with information about the given recorder source index. You can find out how many recorder sources are available using the function
  <a href="audio_get_recorder_count.htm">
   <span>
    audio_get_recorder_count()
   </span>
  </a>
  , and the map returned will contain the following key/value pairs:
  <ul>
   <li>
    "
    <strong>
     name
    </strong>
    " - a name to describe the device
   </li>
   <li>
    "
    <strong>
     index
    </strong>
    " - the index to be used to record
   </li>
   <li>
    "
    <strong>
     data_format
    </strong>
    " - the format data will be returned in (this is currently always
    <span>
     buffer_s16
    </span>
    but other formats may be supported in the future)
   </li>
   <li>
    "
    <strong>
     sample_rate
    </strong>
    " - the sample rate (in Hz) of the data returned (currently clamped to 16000hz but this may change in future)
   </li>
   <li>
    "
    <strong>
     channels
    </strong>
    " - the constant
    <span>
     audio_mono
    </span>
    (further constants for stereo and 3D may be supported in the future)
   </li>
  </ul>
  Note that while the function creates a DS map for you, it does
  <i>
   not
  </i>
  remove it again later and so you should be destroying the map yourself when it is no longer needed to prevent any memory leaks.
  <b>
   <span>
    NOTE
   </span>
  </b>
  Most platforms
  <b>
   except HTML5
  </b>
  support recording audio in some form, but that does not mean that all devices will permit it, even if the platform does, so you should always check that the
  <span>
   <a href="audio_get_recorder_count.htm">
    <span>
     audio_get_recorder_count()
    </span>
   </a>
  </span>
  function returns a value greater than 0 to verify that recording devices are available before using the rest of the recording functions.
  <h4>
   Syntax:
  </h4>
  <pre><code class="language-gml">audio_get_recorder_info(recorder_index);
</code></pre>
  <table>
   <tbody>
    <tr>
     <th>
      Argument
     </th>
     <th>
      Type
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      recorder_index
     </td>
     <td>
      <span>
       <a href="../../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">
        Real
       </a>
      </span>
     </td>
     <td>
      The index of the recorder source to get the information from.
     </td>
    </tr>
   </tbody>
  </table>
  <h4>
   Returns:
  </h4>
  <pre><code class="language-gml"><a href="../../../../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">
 DS Map ID
</a></code></pre>
  <h4>
   Example:
  </h4>
  <pre><code class="language-gml">len = async_load[? "data_len"];
audio_buff = buffer_create(len, buffer_fast, 1);
buffer_copy(async_load[? "buffer_id"], 0, len, buff, 0);
audio_queue_sound(audio_queue, audio_buff, 0, len);
audio_play_sound(audio_queue, 10, 0);
</code></pre>
  The above code would be called in the asynchronous
  <a href="../../../../../The_Asset_Editors/Object_Properties/Async_Events/Audio_Recording.htm">
   Audio Recording
  </a>
  event and assigns some recorded data to a buffer, which is then added to an audio queue. This is then played.
 </body>
</html>