<html>
 <head>
 </head>
 <body>
  <h1>
   Creating An Extension
  </h1>
  To create an extension, you'll first need to right click
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_RMB.png"/><br/>
  anywhere within the
  <a href="../../Introduction/The_Asset_Browser.htm">
   Asset Browser
  </a>
  and select
  <strong>
   Create -> Extension
  </strong>
  . This will open the Extension properties for your newly created asset in the Workspace:
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions.png"/><br/>
  If you do not see this, you can double click on your Extension asset in the Asset Browser to open its properties window or to focus on it when it's already open.
  
  
   This is now ready for you to add the required files and functions, and you can also give the extension a name here (following the usual convention of only letters/numbers and no special symbols except the underscore "_"). You can also set the version number for the extension should you wish to.
  
  
   Under "Copies To" you can choose the platforms that this extension is exported to. For a simple GML extension you do not need to worry about this as it will run on all platforms, however if you are creating a platform-specific extension (such as for Android) then you need to make sure that it's
  <em>
   not
  </em>
  exported to any non-compatible platforms (such as iOS, consoles, etc.).
  <h2>
   Placeholder Files
  </h2>
  To add a file to the new extension you need to click the menu icon
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_ExtensionMenu.png"/><br/>
  and select either a placeholder file ("Add Placeholder") or import the actual file that is required for the target platform ("Add File"):
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_Files.png"/><br/>
  A "generic" placeholder is a file that can be of any type, except those required by the specific platforms (so no
  <span>
   DLL
  </span>
  or
  <span>
   SO
  </span>
  files, for example), and it will not be used except as a "linker" file to connect a set of functions or constants with the given extension (generally it is only for use with iOS and Android extensions, which is explained in the sections below for those targets). You can also add "GML" and "JS" placeholder files for more specific use.
  <h2>
   Adding Files
  </h2>
  Normally you won't need to use placeholders unless you're building for iOS and Android, so you would choose the "Add File" option to add any one of the following files depending on the target platform they are for:
  <ul>
   <li>
    <span>
     .gml
    </span>
    : This is a file made only with the GameMaker Language and is compatible with all platforms.
   </li>
   <li>
    <span>
     .js
    </span>
    : This is a JavaScript extension format and is only compatible with the HTML5 target.
   </li>
   <li>
    <span>
     .dll
    </span>
    : This is a dynamic-link library extension format and is only compatible with the Windows, UWP and Xbox targets (each target will need a different
    <span>
     *.dll
    </span>
    file compatible with its specifications).
   </li>
   <li>
    <span>
     .dylib
    </span>
    : This is the Mac equivalent of a DLL and is only compatible with Mac target (not iOS).
   </li>
   <li>
    <span>
     .so
    </span>
    : This is the Linux equivalent of a DLL and is only compatible with the Ubuntu (Linux) target.
   </li>
   <li>
    <span>
     .prx
    </span>
    : This is a file format for adding functionality to the PlayStation target (each target will need a different
    <span>
     *.prx
    </span>
    file compatible with its specifications).
   </li>
  </ul>
  You'll notice that there is no file type for
  <strong>
   Android
  </strong>
  or
  <strong>
   iOS
  </strong>
  , which is because their set-up is slightly different. Further down you can find explanations on how to set them up but first let's look at creating a general GML extension for any of the target platforms, since the process is the same for all of them.
  <h2>
   Creating a GML Extension
  </h2>
  To start with you need to create the file that is going to be used. For a GML extension, this would be a text file (saved with the
  <span>
   .gml
  </span>
  extension) and would be formatted something like this:
  <pre><code class="language-gml">#define c_alice_blue
return make_color_rgb(240,248,255);


#define instance_create_colour
var i = instance_create_layer(argument0, argument1, argument2, argument3);
with (i)
{
    image_blend = argument3;
}
return i;
</code></pre>
  As you can see, we start each section with a
  <span>
   #define
  </span>
  call, which in the example above is used to define two functions. Let's look at each part of a defined function:
  <ul>
   <li>
    The
    <span>
     #define
    </span>
    statement is used to define a new function with the given name;
   </li>
   <li>
    That statement is then followed by the function code, which uses the
    <span>
     argument0
    </span>
    ,
    <span>
     argument1
    </span>
    , etc. variables to access the arguments passed into the function when it is called;
   </li>
   <li>
    At the end we have a
    <a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm">
     return
    </a>
    statement which is used to return data from the extension back to the GML code where the function was called.
   </li>
  </ul>
  If you were writing a
  <span>
   DLL
  </span>
  or JavaScript extension, then the process would be similar but in the correct language for the extension's file format.
  
  
   Once you have done that, you need to add the file to the extension (using the "Add File" option) which will chain a new window to the Extensions Properties for the File Properties:
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png"/><br/>
  Here you would select the target platform for the extension (for GML you would select them all), as well as rename the extension file and set a few other details, which we'll cover in a moment.
  <strong>
   NOTE
  </strong>
  : Adding a file to an extension copies it to the project directory, meaning that any further changes must be made to that copy for them to be visible in-game. You can find the copy by right-clicking on your extension in the Asset Browser and selecting "Open in Explorer".
  <h2>
   Adding Functions
  </h2>
  The editor should automatically be populated with the functions included in our GML file, but if it isn't then you can add them manually by clicking on the functions menu button
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_ExtensionMenu.png"/><br/>
  and selecting what you require:
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_AddFunctions.png"/><br/>
  Selecting "Add Function" will permit you to add a function to the extension which can then be called in
  <span>
   GameMaker
  </span>
  same as any of the built-in functions.
  <span>
   Once the function has been added, the following window will open for you to define the function properties (or you can double-click the function to open it):
  </span>
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_FunctionEditor.png"/><br/>
  In the image above we have populated the function editor with the details for the function
  <span>
   instance_create_colour()
  </span>
  that we defined in our GML extension file (note that this function editor window isn't just for defining GML functions -- it will be the same across all extension types). Let's go through each option that can be defined for a function:
  <ul>
   <li>
    You can see that we have given the function a
    <em>
     Name
    </em>
    , which is what you would use when calling the function in your project; note that this name doesn't have to match the one used in the extension -- you can name it anything you like and then use the
    <em>
     External Name
    </em>
    field to link it to the actual name defined in the extension:
    <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_FunctionNames.png"/><br/>
   </li>
   <li>
    Below that you have a section for defining the
    <em>
     Help
    </em>
    text, which is the text that will be shown in the code completion pop-up and the helper text at the bottom of the code editor.
   </li>
   <li>
    Next you can define the
    <em>
     Return Type
    </em>
    , which can be a
    <strong>
     double
    </strong>
    (real number
    <a>
     floating point
    </a>
    value) or a
    <strong>
     string
    </strong>
    ; if there is nothing returned by the external function, then this does not matter.
   </li>
   <li>
    Under that you define the arguments that the function will take. These arguments can be either
    <strong>
     doubles
    </strong>
    or
    <strong>
     strings
    </strong>
    , and you can add them by clicking the add button
    <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_AddArgument.png"/><br/>
    and remove them by clicking the remove button
    <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_RemoveArgument.png"/><br/>
    .
      
      If your function can take a variable amount of arguments (meaning it has some optional arguments), you should make sure to check the "Variable Length Arguments" checkbox at the bottom.
   </li>
  </ul>
  <strong>
   NOTE
  </strong>
  : If the function is part of a native extension for Windows, Mac or Ubuntu (
  <span>
   dll
  </span>
  ,
  <span>
   dylib
  </span>
  or
  <span>
   so
  </span>
  respectively) and it has more than four arguments,
  <strong>
   all arguments must be of the same type
  </strong>
  .
  
  
   Once you have done all that then the function is ready to be used in the project; it will now show up in auto-complete and be colour-coded too:
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_GMLFunctionExample.png"/><br/>
  Defined functions can also be set as
  <strong>
   Init Functions
  </strong>
  or
  <strong>
   Final Functions
  </strong>
  , meaning that they will be called automatically when the game starts (Init) and when the game ends (Final).
  <strong>
   IMPORTANT!
  </strong>
  All platforms support the Init function call,
  <strong>
   but not all platforms will perform the Final function call.
  </strong>
  This is because certain platforms will simply close the app without giving any notice or time for this function to be called. The platforms mostly affected by this are
  <strong>
   iOS
  </strong>
  ,
  <strong>
   Android
  </strong>
  ,
  <strong>
   HTML5
  </strong>
  ,
  <strong>
   PlayStation
  </strong>
  and
  <strong>
   Xbox
  </strong>
  .
  <h2>
   Macros
  </h2>
  The other option you have is to create a
  <strong>
   Macro
  </strong>
  . A macro can be either a
  <a>
   constant
  </a>
  value or a short snippet of code (for more information on macros, please see
  <a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">
   here
  </a>
  ). For example, we could remove the
  <span>
   c_alice_blue
  </span>
  function from our previously defined GML extension and make it a macro instead. To create a macro, you can simply click on the "Macros" button in the Extension Properties, which will open the following window:
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_MacroEditor.png"/><br/>
  The editor here is pretty much self explanatory: you give the name of the macro and its constant value, or a short line of code. Note that if the macro is a line of code
  <strong>
   it will be evaluated every time the macro is called
  </strong>
  .
  <h2>
   Proxy Files
  </h2>
  When working with multiple target platforms, it is worth noting that you can create a single extension with only one set of functions/macros which will work on
  <em>
   all
  </em>
  platforms. This is achieved by adding only one of the link libraries to your game as an extension and placing the other(s) into the list of
  <strong>
   Proxy Files
  </strong>
  in the
  <strong>
   Extension Properties
  </strong>
  window.
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Asset_Editors/Editor_Extensions_ProxyFiles.png"/><br/>
  For example, say you have a Windows extension with the
  <span>
   <strong>
    dll
   </strong>
  </span>
  "
  <span>
   Haggis.dll
  </span>
  ". You would simply replicate this
  <span>
   <strong>
    dll
   </strong>
  </span>
  as a Mac
  <span>
   <strong>
    DyLib
   </strong>
  </span>
  , naming it "
  <span>
   <strong>
    libHaggis.dylib
   </strong>
  </span>
  " and making sure that the internal function names match those of the original Windows
  <span>
   <strong>
    dll
   </strong>
  </span>
  . This
  <strong>
   <span>
    DyLib
   </span>
  </strong>
  would then be added into the Proxy Files and set to export when the game is run on the Mac target, and
  <span>
   GameMaker
  </span>
  will automatically use it when the extension functions are called.
  
  
   To add a proxy file, you can simply click on the
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_AddArgument.png"/><br/>
  button in the Properties window for the selected resource file and browse to the file location. Once it is added you may need to update the extension's targets to add the appropriate module, and when you next run your game it will be included as a proxy for that platform. You can remove proxy files too by clicking on the
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_RemoveArgument.png"/><br/>
  button which will remove the selected proxy file.
  
  
   Once you have added your proxy files they will be copied into the Extensions folder of your project (you can find them by right-clicking
  <br/><img src="https://gms.magecorn.com/Manual/assets/Images/Icons/Icon_RMB.png"/><br/>
  on the extension and selecting
  <em>
   Open in Explorer
  </em>
  ), so if you need to edit them, you should edit the copied files that are bundled with the game and not the source file that was imported, as
  <span>
   GameMaker
  </span>
  will be using the ones in the project for compiling.
  <h2>
   Naming Conventions
  </h2>
  It is very important that your proxy files follow the naming conventions listed below, as
  <span>
   GameMaker
  </span>
  will parse these names and assign the target module for the file according to its extension and name and will automatically link the files for you. If you do not follow these conventions your game may not work at runtime, as
  <span>
   GameMaker
  </span>
  will not be able to work out which file to use so it will not load the file properly.
  
  
   The naming conventions for each target platform are given below:
  <table>
   <colgroup>
    <col/>
    <col/>
   </colgroup>
   <tbody>
    <tr>
     <th>
      Platform
     </th>
     <th>
      Names
     </th>
    </tr>
    <tr>
     <td>
      Windows 32bit Runtime
     </td>
     <td>
      <span>
       <
       <em>
        Name
       </em>
       >.dll, lib<
       <em>
        Name
       </em>
       >.dll
      </span>
     </td>
    </tr>
    <tr>
     <td>
      Windows 64bit Runtime
     </td>
     <td>
      <span>
       <
       <em>
        N
       </em>
       <em>
        ame
       </em>
       >_x64.dll, lib<
       <em>
        Name
       </em>
       >_x64.dll
      </span>
     </td>
    </tr>
    <tr>
     <td>
      UWP
     </td>
     <td>
      <span>
       <span>
        <
        <em>
         Name
        </em>
        >.dll, <
        <span>
         <span>
          <em>
           Name
          </em>
         </span>
        </span>
        >_win8_x86.dll, <
        <span>
         <span>
          <em>
           Name
          </em>
         </span>
        </span>
        >_win8_arm.dll, lib<
        <span>
         <span>
          <em>
           Name
          </em>
         </span>
        </span>
        >_win8_x86.dll, lib<
        <span>
         <span>
          <em>
           Name
          </em>
         </span>
        </span>
        >_win8_arm.dll
       </span>
      </span>
     </td>
    </tr>
    <tr>
     <td>
      Ubuntu (Linux)
     </td>
     <td>
      <span>
       <
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >.so, lib<
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >.so,
            <
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >_linux.so, lib<
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >_linux.so,
            
            <
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >_arm.so, lib<
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >_arm.so,
       <span>
        lib<
        <span>
         <span>
          <em>
           Name
          </em>
         </span>
        </span>
        >_linux_arm.so,
       </span>
       <
       <em>
        Name
       </em>
       >_arm64.so, lib<
       <em>
        Name
       </em>
       >_arm64.so, lib<
       <em>
        Name
       </em>
       >_linux_arm64.so,
            
            <
       <em>
        Name
       </em>
       >_arm64-v8.so,
            lib<
       <em>
        Name
       </em>
       >_arm64-v8.so, lib_linux_arm64-v8.so,
            
            <
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >_armeabi-v7a.so, lib<
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >_armeabi-v7a.so, lib<
       <span>
        <span>
         <em>
          Name
         </em>
        </span>
       </span>
       >_linux_armeabi-v7a.so
      </span>
     </td>
    </tr>
    <tr>
     <td>
      macOS
     </td>
     <td>
      <span>
       <
       <em>
        Name
       </em>
       >.dylib, lib.dylib
      </span>
     </td>
    </tr>
    <tr>
     <td>
      HTML5
     </td>
     <td>
      <span>
       <
       <em>
        Name
       </em>
       >.js
      </span>
     </td>
    </tr>
    <tr>
     <td>
      PS4
     </td>
     <td>
      <span>
       <
       <em>
        Name
       </em>
       >.prx, lib<
       <em>
        Name
       </em>
       >.prx, <
       <em>
        Name
       </em>
       >_ps4.prx, lib<
       <em>
        Name
       </em>
       >_ps4.prx
      </span>
     </td>
    </tr>
    <tr>
     <td>
      PS5
     </td>
     <td>
      <span>
       <
       <em>
        Name
       </em>
       >.prx, lib<
       <em>
        Name
       </em>
       >.prx, <
       <em>
        Name
       </em>
       >_ps5.prx, lib<
       <em>
        Name
       </em>
       >_ps5.prx
      </span>
     </td>
    </tr>
    <tr>
     <td>
      Xbox One
     </td>
     <td>
      <span>
       <span>
        <
        <em>
         Name
        </em>
        >.dll,
       </span>
       <
       <em>
        Name
       </em>
       >_xboxone.dll
      </span>
     </td>
    </tr>
    <tr>
     <td>
      Xbox Series X|S
     </td>
     <td>
      <span>
       <span>
        <
        <em>
         Name
        </em>
        >.dll,
       </span>
       <
       <em>
        Name
       </em>
       >_xboxseriesxs.dll
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  Using the conventions above, you would swap out the
  <span>
   <
   <em>
    Name
   </em>
   >
  </span>
  part for the name of the base file that you are adding the proxy files for.
 </body>
</html>